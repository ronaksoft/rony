syntax = "proto2";
package msg;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;

service Edge {
    rpc ServeRequest (stream ProtoMessage) returns (stream ProtoMessage) {}
}


// ProtoMessage
// If AuthID == 0 then Payload is a MessageEnvelop otherwise Payload is a ProtoEncryptedPayload
message ProtoMessage {
    optional int64 AuthID = 1;
    optional bytes MessageKey = 2; // 32 bytes
    required bytes Payload = 3;
}

// MessageEnvelope
// This type of message will be used to contain another ProtoBuffer Message inside
message MessageEnvelope {
    required int64 Constructor = 1;
    required fixed64 RequestID = 2;
    required bytes Message = 4;
}

// UpdateEnvelope
message UpdateEnvelope {
    required int64 Constructor = 1;
    required bytes Update = 2;
    required int32 UCount = 3;
    required int64 UpdateID = 4;
    required int64 Timestamp = 5;
}

// ProtoMessageEncryptedPayload
message ProtoEncryptedPayload {
    required int64 ServerSalt = 1;
    required uint64 MessageID = 2;
    required int64 SessionID = 3;
    required MessageEnvelope Envelope = 4;
}


// MessageContainer
// This type of message will be used to send multi messages inside a single container message
message MessageContainer {
    required int32 Length = 1;
    repeated MessageEnvelope Envelopes = 2;
}

// Error
message Error {
    required string Code = 1;
    required string Items = 2;
}
