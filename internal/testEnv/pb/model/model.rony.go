// Code generated by Rony's protoc plugin; DO NOT EDIT.
// ProtoC ver. v3.15.8
// Rony ver. v0.12.3
// Source: model.proto

package model

import (
	bytes "bytes"
	rony "github.com/ronaksoft/rony"
	edge "github.com/ronaksoft/rony/edge"
	pools "github.com/ronaksoft/rony/pools"
	registry "github.com/ronaksoft/rony/registry"
	store "github.com/ronaksoft/rony/store"
	tools "github.com/ronaksoft/rony/tools"
	gocqlx "github.com/scylladb/gocqlx/v2"
	table "github.com/scylladb/gocqlx/v2/table"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

var _ = pools.Imported

const C_Model1 int64 = 2074613123

type poolModel1 struct {
	pool sync.Pool
}

func (p *poolModel1) Get() *Model1 {
	x, ok := p.pool.Get().(*Model1)
	if !ok {
		x = &Model1{}
	}
	return x
}

func (p *poolModel1) Put(x *Model1) {
	if x == nil {
		return
	}

	x.ID = 0
	x.ShardKey = 0
	x.P1 = ""
	x.P2 = x.P2[:0]
	x.P5 = 0
	x.Enum = 0

	p.pool.Put(x)
}

var PoolModel1 = poolModel1{}

func (x *Model1) DeepCopy(z *Model1) {
	z.ID = x.ID
	z.ShardKey = x.ShardKey
	z.P1 = x.P1
	z.P2 = append(z.P2[:0], x.P2...)
	z.P5 = x.P5
	z.Enum = x.Enum
}

func (x *Model1) Clone() *Model1 {
	z := &Model1{}
	x.DeepCopy(z)
	return z
}

func (x *Model1) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *Model1) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *Model1) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *Model1) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *Model1) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_Model1, x)
}

const C_Model2 int64 = 3802219577

type poolModel2 struct {
	pool sync.Pool
}

func (p *poolModel2) Get() *Model2 {
	x, ok := p.pool.Get().(*Model2)
	if !ok {
		x = &Model2{}
	}
	return x
}

func (p *poolModel2) Put(x *Model2) {
	if x == nil {
		return
	}

	x.ID = 0
	x.ShardKey = 0
	x.P1 = ""
	x.P2 = x.P2[:0]
	x.P5 = 0

	p.pool.Put(x)
}

var PoolModel2 = poolModel2{}

func (x *Model2) DeepCopy(z *Model2) {
	z.ID = x.ID
	z.ShardKey = x.ShardKey
	z.P1 = x.P1
	z.P2 = append(z.P2[:0], x.P2...)
	z.P5 = x.P5
}

func (x *Model2) Clone() *Model2 {
	z := &Model2{}
	x.DeepCopy(z)
	return z
}

func (x *Model2) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *Model2) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *Model2) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *Model2) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *Model2) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_Model2, x)
}

const C_Model3 int64 = 2510714031

type poolModel3 struct {
	pool sync.Pool
}

func (p *poolModel3) Get() *Model3 {
	x, ok := p.pool.Get().(*Model3)
	if !ok {
		x = &Model3{}
	}
	return x
}

func (p *poolModel3) Put(x *Model3) {
	if x == nil {
		return
	}

	x.ID = 0
	x.ShardKey = 0
	x.P1 = x.P1[:0]
	x.P2 = x.P2[:0]
	for _, z := range x.P5 {
		pools.Bytes.Put(z)
	}
	x.P5 = x.P5[:0]

	p.pool.Put(x)
}

var PoolModel3 = poolModel3{}

func (x *Model3) DeepCopy(z *Model3) {
	z.ID = x.ID
	z.ShardKey = x.ShardKey
	z.P1 = append(z.P1[:0], x.P1...)
	z.P2 = append(z.P2[:0], x.P2...)
	z.P5 = z.P5[:0]
	zl := len(z.P5)
	for idx := range x.P5 {
		if idx < zl {
			z.P5 = append(z.P5, append(z.P5[idx][:0], x.P5[idx]...))
		} else {
			zb := pools.Bytes.GetCap(len(x.P5[idx]))
			z.P5 = append(z.P5, append(zb, x.P5[idx]...))
		}
	}
}

func (x *Model3) Clone() *Model3 {
	z := &Model3{}
	x.DeepCopy(z)
	return z
}

func (x *Model3) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *Model3) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *Model3) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *Model3) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *Model3) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_Model3, x)
}

func init() {
	registry.RegisterConstructor(2074613123, "Model1")
	registry.RegisterConstructor(3802219577, "Model2")
	registry.RegisterConstructor(2510714031, "Model3")
}

var _ = bytes.MinRead

func (x *Model1) HasP2(xx string) bool {
	for idx := range x.P2 {
		if x.P2[idx] == xx {
			return true
		}
	}
	return false
}

type Model1PrimaryKey interface {
	makeItPrivate()
}

type Model1PK struct {
	ID       int32
	ShardKey int32
	Enum     Enum
}

func (Model1PK) makeItPrivate() {}

type Model1CustomerSortPK struct {
	Enum     Enum
	ShardKey int32
	ID       int32
}

func (Model1CustomerSortPK) makeItPrivate() {}

type Model1LocalRepo struct {
	s rony.Store
}

func NewModel1LocalRepo(s rony.Store) *Model1LocalRepo {
	return &Model1LocalRepo{
		s: s,
	}
}

func (r *Model1LocalRepo) CreateWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model1) (err error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}
	key := alloc.Gen('M', C_Model1, 1248998560, m.ID, m.ShardKey, m.Enum)
	if store.ExistsByKey(txn, alloc, key) {
		return store.ErrAlreadyExists
	}

	// save table entry
	val := alloc.Marshal(m)
	err = store.SetByKey(txn, val, key)
	if err != nil {
		return
	}

	// save view entry
	err = store.Set(txn, alloc, val, 'M', C_Model1, 2535881670, m.Enum, m.ShardKey, m.ID)
	if err != nil {
		return err
	}

	// key := alloc.Gen('M', C_Model1, 1248998560, m.ID,m.ShardKey,m.Enum)
	// update field index by saving new value: P1
	err = store.Set(txn, alloc, key, 'I', C_Model1, uint64(4843779728911368192), m.P1, m.ID, m.ShardKey, m.Enum)
	if err != nil {
		return
	}
	// update field index by saving new value: P2
	for idx := range m.P2 {
		err = store.Set(txn, alloc, key, 'I', C_Model1, uint64(4749204136736587776), m.P2[idx], m.ID, m.ShardKey, m.Enum)
		if err != nil {
			return
		}
	}

	return
}

func (r *Model1LocalRepo) Create(m *Model1) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()
	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.CreateWithTxn(txn, alloc, m)
	})
}

func (r *Model1LocalRepo) UpdateWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model1) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := r.DeleteWithTxn(txn, alloc, m.ID, m.ShardKey, m.Enum)
	if err != nil {
		return err
	}

	return r.CreateWithTxn(txn, alloc, m)
}

func (r *Model1LocalRepo) Update(id int32, shardKey int32, enum Enum, m *Model1) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		return store.ErrEmptyObject
	}

	err := r.s.Update(func(txn *rony.StoreTxn) (err error) {
		return r.UpdateWithTxn(txn, alloc, m)
	})

	return err
}

func (r *Model1LocalRepo) SaveWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model1) (err error) {
	if store.Exists(txn, alloc, 'M', C_Model1, 1248998560, m.ID, m.ShardKey, m.Enum) {
		return r.UpdateWithTxn(txn, alloc, m)
	} else {
		return r.CreateWithTxn(txn, alloc, m)
	}
}

func (r *Model1LocalRepo) Save(m *Model1) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.SaveWithTxn(txn, alloc, m)
	})
}

func (r *Model1LocalRepo) ReadWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, id int32, shardKey int32, enum Enum, m *Model1) (*Model1, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model1, 1248998560, id, shardKey, enum)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *Model1LocalRepo) Read(id int32, shardKey int32, enum Enum, m *Model1) (*Model1, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model1{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadWithTxn(txn, alloc, id, shardKey, enum, m)
		return err
	})
	return m, err
}

func (r *Model1LocalRepo) ReadByCustomerSortWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator,
	enum Enum, shardKey int32, id int32, m *Model1,
) (*Model1, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model1, 2535881670, enum, shardKey, id)
	if err != nil {
		return nil, err
	}
	return m, err
}

func (r *Model1LocalRepo) ReadByCustomerSort(enum Enum, shardKey int32, id int32, m *Model1) (*Model1, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model1{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadByCustomerSortWithTxn(txn, alloc, enum, shardKey, id, m)
		return err
	})
	return m, err
}

func (r *Model1LocalRepo) DeleteWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, id int32, shardKey int32, enum Enum) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	m := &Model1{}
	err := store.Unmarshal(txn, alloc, m, 'M', C_Model1, 1248998560, id, shardKey, enum)
	if err != nil {
		return err
	}
	err = store.Delete(txn, alloc, 'M', C_Model1, 1248998560, m.ID, m.ShardKey, m.Enum)
	if err != nil {
		return err
	}

	// delete field index
	err = store.Delete(txn, alloc, 'I', C_Model1, uint64(4843779728911368192), m.P1, m.ID, m.ShardKey, m.Enum)
	if err != nil {
		return err
	}

	// delete field index
	for idx := range m.P2 {
		err = store.Delete(txn, alloc, 'I', C_Model1, uint64(4749204136736587776), m.P2[idx], m.ID, m.ShardKey, m.Enum)
		if err != nil {
			return err
		}
	}

	err = store.Delete(txn, alloc, 'M', C_Model1, 2535881670, m.Enum, m.ShardKey, m.ID)
	if err != nil {
		return err
	}

	return nil
}

func (r *Model1LocalRepo) Delete(id int32, shardKey int32, enum Enum) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.DeleteWithTxn(txn, alloc, id, shardKey, enum)
	})
}

func (r *Model1LocalRepo) ListWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator, pk Model1PrimaryKey, lo *store.ListOption, cond func(m *Model1) bool,
) ([]*Model1, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	var seekKey []byte
	opt := store.DefaultIteratorOptions
	opt.Reverse = lo.Backward()
	res := make([]*Model1, 0, lo.Limit())

	switch pk := pk.(type) {
	case Model1PK:
		opt.Prefix = alloc.Gen('M', C_Model1, 1248998560)
		seekKey = alloc.Gen('M', C_Model1, 1248998560, pk.ID, pk.ShardKey, pk.Enum)

	case Model1CustomerSortPK:
		opt.Prefix = alloc.Gen('M', C_Model1, 2535881670)
		seekKey = alloc.Gen('M', C_Model1, 2535881670, pk.Enum, pk.ShardKey, pk.ID)

	default:
		opt.Prefix = alloc.Gen('M', C_Model1, 1248998560)
		seekKey = opt.Prefix
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		offset := lo.Skip()
		limit := lo.Limit()
		for iter.Seek(seekKey); iter.Valid(); iter.Next() {
			if offset--; offset >= 0 {
				continue
			}
			if limit--; limit < 0 {
				break
			}
			err = iter.Item().Value(func(val []byte) error {
				m := &Model1{}
				err := m.Unmarshal(val)
				if err != nil {
					return err
				}
				if cond == nil || cond(m) {
					res = append(res, m)
				} else {
					limit++
				}
				return nil
			})
			if err != nil {
				return err
			}
		}
		iter.Close()
		return
	})

	return res, err
}

func (r *Model1LocalRepo) List(
	pk Model1PrimaryKey, lo *store.ListOption, cond func(m *Model1) bool,
) ([]*Model1, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	var (
		res []*Model1
		err error
	)
	err = r.s.View(func(txn *rony.StoreTxn) error {
		res, err = r.ListWithTxn(txn, alloc, pk, lo, cond)
		return err
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (r *Model1LocalRepo) IterWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator, pk Model1PrimaryKey, ito *store.IterOption, cb func(m *Model1) bool,
) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	var seekKey []byte
	opt := store.DefaultIteratorOptions
	opt.Reverse = ito.Backward()

	switch pk := pk.(type) {
	case Model1PK:
		opt.Prefix = alloc.Gen('M', C_Model1, 1248998560)
		seekKey = alloc.Gen('M', C_Model1, 1248998560, pk.ID, pk.ShardKey, pk.Enum)

	case Model1CustomerSortPK:
		opt.Prefix = alloc.Gen('M', C_Model1, 2535881670)
		seekKey = alloc.Gen('M', C_Model1, 2535881670, pk.Enum, pk.ShardKey, pk.ID)

	default:
		opt.Prefix = alloc.Gen('M', C_Model1, 1248998560)
		seekKey = opt.Prefix
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		if ito.OffsetKey() == nil {
			iter.Seek(seekKey)
		} else {
			iter.Seek(ito.OffsetKey())
		}
		exitLoop := false
		for ; iter.Valid(); iter.Next() {
			err = iter.Item().Value(func(val []byte) error {
				m := &Model1{}
				err := m.Unmarshal(val)
				if err != nil {
					return err
				}
				if !cb(m) {
					exitLoop = true
				}
				return nil
			})
			if err != nil || exitLoop {
				break
			}
		}
		iter.Close()

		return
	})

	return err
}

func (r *Model1LocalRepo) Iter(
	pk Model1PrimaryKey, ito *store.IterOption, cb func(m *Model1) bool,
) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.View(func(txn *rony.StoreTxn) error {
		return r.IterWithTxn(txn, alloc, pk, ito, cb)
	})
}

func (r *Model1LocalRepo) ListByP1(p1 string, lo *store.ListOption, cond func(*Model1) bool) ([]*Model1, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	opt := store.DefaultIteratorOptions
	opt.Reverse = lo.Backward()
	opt.Prefix = alloc.Gen('I', C_Model1, uint64(4843779728911368192), p1)
	res := make([]*Model1, 0, lo.Limit())
	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		offset := lo.Skip()
		limit := lo.Limit()
		for iter.Seek(opt.Prefix); iter.Valid(); iter.Next() {
			if offset--; offset >= 0 {
				continue
			}
			if limit--; limit < 0 {
				break
			}
			err = iter.Item().Value(func(val []byte) error {
				b, err := store.GetByKey(txn, alloc, val)
				if err != nil {
					return err
				}
				m := &Model1{}
				err = m.Unmarshal(b)
				if err != nil {
					return err
				}
				if cond == nil || cond(m) {
					res = append(res, m)
				} else {
					limit++
				}
				return nil
			})
			if err != nil {
				break
			}
		}
		iter.Close()
		return err
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (r *Model1LocalRepo) ListByP2(p2 string, lo *store.ListOption, cond func(*Model1) bool) ([]*Model1, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	opt := store.DefaultIteratorOptions
	opt.Reverse = lo.Backward()
	opt.Prefix = alloc.Gen('I', C_Model1, uint64(4749204136736587776), p2)
	res := make([]*Model1, 0, lo.Limit())
	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		offset := lo.Skip()
		limit := lo.Limit()
		for iter.Seek(opt.Prefix); iter.Valid(); iter.Next() {
			if offset--; offset >= 0 {
				continue
			}
			if limit--; limit < 0 {
				break
			}
			err = iter.Item().Value(func(val []byte) error {
				b, err := store.GetByKey(txn, alloc, val)
				if err != nil {
					return err
				}
				m := &Model1{}
				err = m.Unmarshal(b)
				if err != nil {
					return err
				}
				if cond == nil || cond(m) {
					res = append(res, m)
				} else {
					limit++
				}
				return nil
			})
			if err != nil {
				break
			}
		}
		iter.Close()
		return err
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (x *Model2) HasP2(xx string) bool {
	for idx := range x.P2 {
		if x.P2[idx] == xx {
			return true
		}
	}
	return false
}

type Model2PrimaryKey interface {
	makeItPrivate()
}

type Model2PK struct {
	ID       int64
	ShardKey int32
	P1       string
}

func (Model2PK) makeItPrivate() {}

type Model2P1ShardKeyIDPK struct {
	P1       string
	ShardKey int32
	ID       int64
}

func (Model2P1ShardKeyIDPK) makeItPrivate() {}

type Model2LocalRepo struct {
	s rony.Store
}

func NewModel2LocalRepo(s rony.Store) *Model2LocalRepo {
	return &Model2LocalRepo{
		s: s,
	}
}

func (r *Model2LocalRepo) CreateWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model2) (err error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}
	key := alloc.Gen('M', C_Model2, 1609271041, m.ID, m.ShardKey, m.P1)
	if store.ExistsByKey(txn, alloc, key) {
		return store.ErrAlreadyExists
	}

	// save table entry
	val := alloc.Marshal(m)
	err = store.SetByKey(txn, val, key)
	if err != nil {
		return
	}

	// save view entry
	err = store.Set(txn, alloc, val, 'M', C_Model2, 2344331025, m.P1, m.ShardKey, m.ID)
	if err != nil {
		return err
	}

	return
}

func (r *Model2LocalRepo) Create(m *Model2) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()
	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.CreateWithTxn(txn, alloc, m)
	})
}

func (r *Model2LocalRepo) UpdateWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model2) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := r.DeleteWithTxn(txn, alloc, m.ID, m.ShardKey, m.P1)
	if err != nil {
		return err
	}

	return r.CreateWithTxn(txn, alloc, m)
}

func (r *Model2LocalRepo) Update(id int64, shardKey int32, p1 string, m *Model2) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		return store.ErrEmptyObject
	}

	err := r.s.Update(func(txn *rony.StoreTxn) (err error) {
		return r.UpdateWithTxn(txn, alloc, m)
	})

	return err
}

func (r *Model2LocalRepo) SaveWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model2) (err error) {
	if store.Exists(txn, alloc, 'M', C_Model2, 1609271041, m.ID, m.ShardKey, m.P1) {
		return r.UpdateWithTxn(txn, alloc, m)
	} else {
		return r.CreateWithTxn(txn, alloc, m)
	}
}

func (r *Model2LocalRepo) Save(m *Model2) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.SaveWithTxn(txn, alloc, m)
	})
}

func (r *Model2LocalRepo) ReadWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, id int64, shardKey int32, p1 string, m *Model2) (*Model2, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model2, 1609271041, id, shardKey, p1)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *Model2LocalRepo) Read(id int64, shardKey int32, p1 string, m *Model2) (*Model2, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model2{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadWithTxn(txn, alloc, id, shardKey, p1, m)
		return err
	})
	return m, err
}

func (r *Model2LocalRepo) ReadByP1ShardKeyIDWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator,
	p1 string, shardKey int32, id int64, m *Model2,
) (*Model2, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model2, 2344331025, p1, shardKey, id)
	if err != nil {
		return nil, err
	}
	return m, err
}

func (r *Model2LocalRepo) ReadByP1ShardKeyID(p1 string, shardKey int32, id int64, m *Model2) (*Model2, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model2{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadByP1ShardKeyIDWithTxn(txn, alloc, p1, shardKey, id, m)
		return err
	})
	return m, err
}

func (r *Model2LocalRepo) DeleteWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, id int64, shardKey int32, p1 string) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	m := &Model2{}
	err := store.Unmarshal(txn, alloc, m, 'M', C_Model2, 1609271041, id, shardKey, p1)
	if err != nil {
		return err
	}
	err = store.Delete(txn, alloc, 'M', C_Model2, 1609271041, m.ID, m.ShardKey, m.P1)
	if err != nil {
		return err
	}

	err = store.Delete(txn, alloc, 'M', C_Model2, 2344331025, m.P1, m.ShardKey, m.ID)
	if err != nil {
		return err
	}

	return nil
}

func (r *Model2LocalRepo) Delete(id int64, shardKey int32, p1 string) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.DeleteWithTxn(txn, alloc, id, shardKey, p1)
	})
}

func (r *Model2LocalRepo) ListWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator, pk Model2PrimaryKey, lo *store.ListOption, cond func(m *Model2) bool,
) ([]*Model2, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	var seekKey []byte
	opt := store.DefaultIteratorOptions
	opt.Reverse = lo.Backward()
	res := make([]*Model2, 0, lo.Limit())

	switch pk := pk.(type) {
	case Model2PK:
		opt.Prefix = alloc.Gen('M', C_Model2, 1609271041)
		seekKey = alloc.Gen('M', C_Model2, 1609271041, pk.ID, pk.ShardKey, pk.P1)

	case Model2P1ShardKeyIDPK:
		opt.Prefix = alloc.Gen('M', C_Model2, 2344331025)
		seekKey = alloc.Gen('M', C_Model2, 2344331025, pk.P1, pk.ShardKey, pk.ID)

	default:
		opt.Prefix = alloc.Gen('M', C_Model2, 1609271041)
		seekKey = opt.Prefix
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		offset := lo.Skip()
		limit := lo.Limit()
		for iter.Seek(seekKey); iter.Valid(); iter.Next() {
			if offset--; offset >= 0 {
				continue
			}
			if limit--; limit < 0 {
				break
			}
			err = iter.Item().Value(func(val []byte) error {
				m := &Model2{}
				err := m.Unmarshal(val)
				if err != nil {
					return err
				}
				if cond == nil || cond(m) {
					res = append(res, m)
				} else {
					limit++
				}
				return nil
			})
			if err != nil {
				return err
			}
		}
		iter.Close()
		return
	})

	return res, err
}

func (r *Model2LocalRepo) List(
	pk Model2PrimaryKey, lo *store.ListOption, cond func(m *Model2) bool,
) ([]*Model2, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	var (
		res []*Model2
		err error
	)
	err = r.s.View(func(txn *rony.StoreTxn) error {
		res, err = r.ListWithTxn(txn, alloc, pk, lo, cond)
		return err
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (r *Model2LocalRepo) IterWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator, pk Model2PrimaryKey, ito *store.IterOption, cb func(m *Model2) bool,
) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	var seekKey []byte
	opt := store.DefaultIteratorOptions
	opt.Reverse = ito.Backward()

	switch pk := pk.(type) {
	case Model2PK:
		opt.Prefix = alloc.Gen('M', C_Model2, 1609271041)
		seekKey = alloc.Gen('M', C_Model2, 1609271041, pk.ID, pk.ShardKey, pk.P1)

	case Model2P1ShardKeyIDPK:
		opt.Prefix = alloc.Gen('M', C_Model2, 2344331025)
		seekKey = alloc.Gen('M', C_Model2, 2344331025, pk.P1, pk.ShardKey, pk.ID)

	default:
		opt.Prefix = alloc.Gen('M', C_Model2, 1609271041)
		seekKey = opt.Prefix
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		if ito.OffsetKey() == nil {
			iter.Seek(seekKey)
		} else {
			iter.Seek(ito.OffsetKey())
		}
		exitLoop := false
		for ; iter.Valid(); iter.Next() {
			err = iter.Item().Value(func(val []byte) error {
				m := &Model2{}
				err := m.Unmarshal(val)
				if err != nil {
					return err
				}
				if !cb(m) {
					exitLoop = true
				}
				return nil
			})
			if err != nil || exitLoop {
				break
			}
		}
		iter.Close()

		return
	})

	return err
}

func (r *Model2LocalRepo) Iter(
	pk Model2PrimaryKey, ito *store.IterOption, cb func(m *Model2) bool,
) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.View(func(txn *rony.StoreTxn) error {
		return r.IterWithTxn(txn, alloc, pk, ito, cb)
	})
}

func (x *Model3) HasP2(xx string) bool {
	for idx := range x.P2 {
		if x.P2[idx] == xx {
			return true
		}
	}
	return false
}

func (x *Model3) HasP5(xx []byte) bool {
	for idx := range x.P5 {
		if bytes.Equal(x.P5[idx], xx) {
			return true
		}
	}
	return false
}

type Model3PrimaryKey interface {
	makeItPrivate()
}

type Model3PK struct {
	ID       int64
	ShardKey int32
	P1       []byte
}

func (Model3PK) makeItPrivate() {}

type Model3P1ShardKeyIDPK struct {
	P1       []byte
	ShardKey int32
	ID       int64
}

func (Model3P1ShardKeyIDPK) makeItPrivate() {}

type Model3P1IDPK struct {
	P1 []byte
	ID int64
}

func (Model3P1IDPK) makeItPrivate() {}

type Model3LocalRepo struct {
	s rony.Store
}

func NewModel3LocalRepo(s rony.Store) *Model3LocalRepo {
	return &Model3LocalRepo{
		s: s,
	}
}

func (r *Model3LocalRepo) CreateWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model3) (err error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}
	key := alloc.Gen('M', C_Model3, 1609271041, m.ID, m.ShardKey, m.P1)
	if store.ExistsByKey(txn, alloc, key) {
		return store.ErrAlreadyExists
	}

	// save table entry
	val := alloc.Marshal(m)
	err = store.SetByKey(txn, val, key)
	if err != nil {
		return
	}

	// save view entry
	err = store.Set(txn, alloc, val, 'M', C_Model3, 2344331025, m.P1, m.ShardKey, m.ID)
	if err != nil {
		return err
	}
	// save view entry
	err = store.Set(txn, alloc, val, 'M', C_Model3, 3623577939, m.P1, m.ID)
	if err != nil {
		return err
	}

	// key := alloc.Gen('M', C_Model3, 1609271041, m.ID,m.ShardKey,m.P1)
	// update field index by saving new value: P5
	for idx := range m.P5 {
		err = store.Set(txn, alloc, key, 'I', C_Model3, uint64(5041938112515670016), m.P5[idx], m.ID, m.ShardKey, m.P1)
		if err != nil {
			return
		}
	}

	return
}

func (r *Model3LocalRepo) Create(m *Model3) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()
	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.CreateWithTxn(txn, alloc, m)
	})
}

func (r *Model3LocalRepo) UpdateWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model3) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := r.DeleteWithTxn(txn, alloc, m.ID, m.ShardKey, m.P1)
	if err != nil {
		return err
	}

	return r.CreateWithTxn(txn, alloc, m)
}

func (r *Model3LocalRepo) Update(id int64, shardKey int32, p1 []byte, m *Model3) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		return store.ErrEmptyObject
	}

	err := r.s.Update(func(txn *rony.StoreTxn) (err error) {
		return r.UpdateWithTxn(txn, alloc, m)
	})

	return err
}

func (r *Model3LocalRepo) SaveWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, m *Model3) (err error) {
	if store.Exists(txn, alloc, 'M', C_Model3, 1609271041, m.ID, m.ShardKey, m.P1) {
		return r.UpdateWithTxn(txn, alloc, m)
	} else {
		return r.CreateWithTxn(txn, alloc, m)
	}
}

func (r *Model3LocalRepo) Save(m *Model3) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.SaveWithTxn(txn, alloc, m)
	})
}

func (r *Model3LocalRepo) ReadWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, id int64, shardKey int32, p1 []byte, m *Model3) (*Model3, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model3, 1609271041, id, shardKey, p1)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *Model3LocalRepo) Read(id int64, shardKey int32, p1 []byte, m *Model3) (*Model3, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model3{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadWithTxn(txn, alloc, id, shardKey, p1, m)
		return err
	})
	return m, err
}

func (r *Model3LocalRepo) ReadByP1ShardKeyIDWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator,
	p1 []byte, shardKey int32, id int64, m *Model3,
) (*Model3, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model3, 2344331025, p1, shardKey, id)
	if err != nil {
		return nil, err
	}
	return m, err
}

func (r *Model3LocalRepo) ReadByP1ShardKeyID(p1 []byte, shardKey int32, id int64, m *Model3) (*Model3, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model3{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadByP1ShardKeyIDWithTxn(txn, alloc, p1, shardKey, id, m)
		return err
	})
	return m, err
}

func (r *Model3LocalRepo) ReadByP1IDWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator,
	p1 []byte, id int64, m *Model3,
) (*Model3, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	err := store.Unmarshal(txn, alloc, m, 'M', C_Model3, 3623577939, p1, id)
	if err != nil {
		return nil, err
	}
	return m, err
}

func (r *Model3LocalRepo) ReadByP1ID(p1 []byte, id int64, m *Model3) (*Model3, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	if m == nil {
		m = &Model3{}
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		m, err = r.ReadByP1IDWithTxn(txn, alloc, p1, id, m)
		return err
	})
	return m, err
}

func (r *Model3LocalRepo) DeleteWithTxn(txn *rony.StoreTxn, alloc *tools.Allocator, id int64, shardKey int32, p1 []byte) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	m := &Model3{}
	err := store.Unmarshal(txn, alloc, m, 'M', C_Model3, 1609271041, id, shardKey, p1)
	if err != nil {
		return err
	}
	err = store.Delete(txn, alloc, 'M', C_Model3, 1609271041, m.ID, m.ShardKey, m.P1)
	if err != nil {
		return err
	}

	// delete field index
	for idx := range m.P5 {
		err = store.Delete(txn, alloc, 'I', C_Model3, uint64(5041938112515670016), m.P5[idx], m.ID, m.ShardKey, m.P1)
		if err != nil {
			return err
		}
	}
	err = store.Delete(txn, alloc, 'M', C_Model3, 2344331025, m.P1, m.ShardKey, m.ID)
	if err != nil {
		return err
	}
	err = store.Delete(txn, alloc, 'M', C_Model3, 3623577939, m.P1, m.ID)
	if err != nil {
		return err
	}

	return nil
}

func (r *Model3LocalRepo) Delete(id int64, shardKey int32, p1 []byte) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.Update(func(txn *rony.StoreTxn) error {
		return r.DeleteWithTxn(txn, alloc, id, shardKey, p1)
	})
}

func (r *Model3LocalRepo) ListWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator, pk Model3PrimaryKey, lo *store.ListOption, cond func(m *Model3) bool,
) ([]*Model3, error) {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	var seekKey []byte
	opt := store.DefaultIteratorOptions
	opt.Reverse = lo.Backward()
	res := make([]*Model3, 0, lo.Limit())

	switch pk := pk.(type) {
	case Model3PK:
		opt.Prefix = alloc.Gen('M', C_Model3, 1609271041)
		seekKey = alloc.Gen('M', C_Model3, 1609271041, pk.ID, pk.ShardKey, pk.P1)

	case Model3P1ShardKeyIDPK:
		opt.Prefix = alloc.Gen('M', C_Model3, 2344331025)
		seekKey = alloc.Gen('M', C_Model3, 2344331025, pk.P1, pk.ShardKey, pk.ID)

	case Model3P1IDPK:
		opt.Prefix = alloc.Gen('M', C_Model3, 3623577939)
		seekKey = alloc.Gen('M', C_Model3, 3623577939, pk.P1, pk.ID)

	default:
		opt.Prefix = alloc.Gen('M', C_Model3, 1609271041)
		seekKey = opt.Prefix
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		offset := lo.Skip()
		limit := lo.Limit()
		for iter.Seek(seekKey); iter.Valid(); iter.Next() {
			if offset--; offset >= 0 {
				continue
			}
			if limit--; limit < 0 {
				break
			}
			err = iter.Item().Value(func(val []byte) error {
				m := &Model3{}
				err := m.Unmarshal(val)
				if err != nil {
					return err
				}
				if cond == nil || cond(m) {
					res = append(res, m)
				} else {
					limit++
				}
				return nil
			})
			if err != nil {
				return err
			}
		}
		iter.Close()
		return
	})

	return res, err
}

func (r *Model3LocalRepo) List(
	pk Model3PrimaryKey, lo *store.ListOption, cond func(m *Model3) bool,
) ([]*Model3, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	var (
		res []*Model3
		err error
	)
	err = r.s.View(func(txn *rony.StoreTxn) error {
		res, err = r.ListWithTxn(txn, alloc, pk, lo, cond)
		return err
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (r *Model3LocalRepo) IterWithTxn(
	txn *rony.StoreTxn, alloc *tools.Allocator, pk Model3PrimaryKey, ito *store.IterOption, cb func(m *Model3) bool,
) error {
	if alloc == nil {
		alloc = tools.NewAllocator()
		defer alloc.ReleaseAll()
	}

	var seekKey []byte
	opt := store.DefaultIteratorOptions
	opt.Reverse = ito.Backward()

	switch pk := pk.(type) {
	case Model3PK:
		opt.Prefix = alloc.Gen('M', C_Model3, 1609271041)
		seekKey = alloc.Gen('M', C_Model3, 1609271041, pk.ID, pk.ShardKey, pk.P1)

	case Model3P1ShardKeyIDPK:
		opt.Prefix = alloc.Gen('M', C_Model3, 2344331025)
		seekKey = alloc.Gen('M', C_Model3, 2344331025, pk.P1, pk.ShardKey, pk.ID)

	case Model3P1IDPK:
		opt.Prefix = alloc.Gen('M', C_Model3, 3623577939)
		seekKey = alloc.Gen('M', C_Model3, 3623577939, pk.P1, pk.ID)

	default:
		opt.Prefix = alloc.Gen('M', C_Model3, 1609271041)
		seekKey = opt.Prefix
	}

	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		if ito.OffsetKey() == nil {
			iter.Seek(seekKey)
		} else {
			iter.Seek(ito.OffsetKey())
		}
		exitLoop := false
		for ; iter.Valid(); iter.Next() {
			err = iter.Item().Value(func(val []byte) error {
				m := &Model3{}
				err := m.Unmarshal(val)
				if err != nil {
					return err
				}
				if !cb(m) {
					exitLoop = true
				}
				return nil
			})
			if err != nil || exitLoop {
				break
			}
		}
		iter.Close()

		return
	})

	return err
}

func (r *Model3LocalRepo) Iter(
	pk Model3PrimaryKey, ito *store.IterOption, cb func(m *Model3) bool,
) error {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	return r.s.View(func(txn *rony.StoreTxn) error {
		return r.IterWithTxn(txn, alloc, pk, ito, cb)
	})
}

func (r *Model3LocalRepo) ListByP5(p5 []byte, lo *store.ListOption, cond func(*Model3) bool) ([]*Model3, error) {
	alloc := tools.NewAllocator()
	defer alloc.ReleaseAll()

	opt := store.DefaultIteratorOptions
	opt.Reverse = lo.Backward()
	opt.Prefix = alloc.Gen('I', C_Model3, uint64(5041938112515670016), p5)
	res := make([]*Model3, 0, lo.Limit())
	err := r.s.View(func(txn *rony.StoreTxn) (err error) {
		iter := txn.NewIterator(opt)
		offset := lo.Skip()
		limit := lo.Limit()
		for iter.Seek(opt.Prefix); iter.Valid(); iter.Next() {
			if offset--; offset >= 0 {
				continue
			}
			if limit--; limit < 0 {
				break
			}
			err = iter.Item().Value(func(val []byte) error {
				b, err := store.GetByKey(txn, alloc, val)
				if err != nil {
					return err
				}
				m := &Model3{}
				err = m.Unmarshal(b)
				if err != nil {
					return err
				}
				if cond == nil || cond(m) {
					res = append(res, m)
				} else {
					limit++
				}
				return nil
			})
			if err != nil {
				break
			}
		}
		iter.Close()
		return err
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}

type Model1RemoteRepo struct {
	qp map[string]*pools.QueryPool
	t  *table.Table
	v  map[string]*table.Table
	s  gocqlx.Session
}

func NewModel1RemoteRepo(s gocqlx.Session) *Model1RemoteRepo {
	r := &Model1RemoteRepo{
		s: s,
		t: table.New(table.Metadata{
			Name:    "tab_model_1",
			Columns: []string{"id", "shard_key", "enum", "sdata"},
			PartKey: []string{"id"},
			SortKey: []string{"shard_key", "enum"},
		}),
		v: map[string]*table.Table{
			"CustomerSort": table.New(table.Metadata{
				Name:    "view_model_1_customer_sort",
				Columns: []string{"enum", "shard_key", "id", "sdata"},
				PartKey: []string{"enum"},
				SortKey: []string{"shard_key", "id"},
			}),
		},
	}

	r.qp = map[string]*pools.QueryPool{
		"insertIF": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.InsertBuilder().Unique().Query(s)
		}),
		"insert": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.InsertBuilder().Query(s)
		}),
		"update": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.UpdateBuilder().Set("sdata").Query(s)
		}),
		"delete": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.DeleteBuilder().Query(s)
		}),
		"get": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.GetQuery(s)
		}),
		"getByCustomerSort": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.v["CustomerSort"].GetQuery(s)
		}),
	}
	return r
}

func (r *Model1RemoteRepo) Table() *table.Table {
	return r.t
}

func (r *Model1RemoteRepo) T() *table.Table {
	return r.t
}

func (r *Model1RemoteRepo) CustomerSort() *table.Table {
	return r.v["CustomerSort"]
}

func (r *Model1RemoteRepo) Insert(m *Model1, replace bool) error {
	buf := pools.Buffer.FromProto(m)
	defer pools.Buffer.Put(buf)

	var q *gocqlx.Queryx
	if replace {
		q = r.qp["insertIF"].GetQuery()
		defer r.qp["insertIF"].Put(q)
	} else {
		q = r.qp["insert"].GetQuery()
		defer r.qp["insert"].Put(q)
	}

	q.Bind(m.ID, m.ShardKey, m.Enum, *buf.Bytes())
	return q.Exec()
}

func (r *Model1RemoteRepo) Update(m *Model1) error {
	buf := pools.Buffer.FromProto(m)
	defer pools.Buffer.Put(buf)

	q := r.qp["update"].GetQuery()
	defer r.qp["update"].Put(q)

	q.Bind(*buf.Bytes(), m.ID, m.ShardKey, m.Enum)
	return q.Exec()
}

func (r *Model1RemoteRepo) Delete(id int32, shardKey int32, enum Enum) error {
	q := r.qp["delete"].GetQuery()
	defer r.qp["delete"].Put(q)

	q.Bind(id, shardKey, enum)
	return q.Exec()
}

func (r *Model1RemoteRepo) Get(id int32, shardKey int32, enum Enum, m *Model1) (*Model1, error) {
	q := r.qp["get"].GetQuery()
	defer r.qp["get"].Put(q)

	if m == nil {
		m = &Model1{}
	}

	q.Bind(id, shardKey, enum)

	var b []byte
	err := q.Scan(&m.ID, &m.ShardKey, &m.Enum, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model1RemoteRepo) GetByCustomerSort(enum Enum, shardKey int32, id int32, m *Model1) (*Model1, error) {
	q := r.qp["getByCustomerSort"].GetQuery()
	defer r.qp["getByCustomerSort"].Put(q)

	if m == nil {
		m = &Model1{}
	}

	q.Bind(enum, shardKey, id)

	var b []byte
	err := q.Scan(&m.Enum, &m.ShardKey, &m.ID, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model1RemoteRepo) List(pk Model1PrimaryKey, limit uint) ([]*Model1, error) {
	var (
		q   *gocqlx.Queryx
		res []*Model1
		err error
	)

	switch pk := pk.(type) {
	case Model1PK:
		q = r.t.SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.ID)

	case Model1CustomerSortPK:
		q = r.v["CustomerSort"].SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.Enum)

	default:
		panic("BUG!! incorrect mount key")
	}
	err = q.SelectRelease(&res)

	return res, err
}

type Model2RemoteRepo struct {
	qp map[string]*pools.QueryPool
	t  *table.Table
	v  map[string]*table.Table
	s  gocqlx.Session
}

func NewModel2RemoteRepo(s gocqlx.Session) *Model2RemoteRepo {
	r := &Model2RemoteRepo{
		s: s,
		t: table.New(table.Metadata{
			Name:    "tab_model_2",
			Columns: []string{"id", "shard_key", "p_1", "sdata"},
			PartKey: []string{"id", "shard_key"},
			SortKey: []string{"p_1"},
		}),
		v: map[string]*table.Table{
			"P1ShardKeyID": table.New(table.Metadata{
				Name:    "view_model_2_p_1_shard_key_id",
				Columns: []string{"p_1", "shard_key", "id", "sdata"},
				PartKey: []string{"p_1"},
				SortKey: []string{"shard_key", "id"},
			}),
		},
	}

	r.qp = map[string]*pools.QueryPool{
		"insertIF": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.InsertBuilder().Unique().Query(s)
		}),
		"insert": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.InsertBuilder().Query(s)
		}),
		"update": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.UpdateBuilder().Set("sdata").Query(s)
		}),
		"delete": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.DeleteBuilder().Query(s)
		}),
		"get": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.GetQuery(s)
		}),
		"getByP1ShardKeyID": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.v["P1ShardKeyID"].GetQuery(s)
		}),
	}
	return r
}

func (r *Model2RemoteRepo) Table() *table.Table {
	return r.t
}

func (r *Model2RemoteRepo) T() *table.Table {
	return r.t
}

func (r *Model2RemoteRepo) MVP1ShardKeyID() *table.Table {
	return r.v["P1ShardKeyID"]
}

func (r *Model2RemoteRepo) Insert(m *Model2, replace bool) error {
	buf := pools.Buffer.FromProto(m)
	defer pools.Buffer.Put(buf)

	var q *gocqlx.Queryx
	if replace {
		q = r.qp["insertIF"].GetQuery()
		defer r.qp["insertIF"].Put(q)
	} else {
		q = r.qp["insert"].GetQuery()
		defer r.qp["insert"].Put(q)
	}

	q.Bind(m.ID, m.ShardKey, m.P1, *buf.Bytes())
	return q.Exec()
}

func (r *Model2RemoteRepo) Update(m *Model2) error {
	buf := pools.Buffer.FromProto(m)
	defer pools.Buffer.Put(buf)

	q := r.qp["update"].GetQuery()
	defer r.qp["update"].Put(q)

	q.Bind(*buf.Bytes(), m.ID, m.ShardKey, m.P1)
	return q.Exec()
}

func (r *Model2RemoteRepo) Delete(id int64, shardKey int32, p1 string) error {
	q := r.qp["delete"].GetQuery()
	defer r.qp["delete"].Put(q)

	q.Bind(id, shardKey, p1)
	return q.Exec()
}

func (r *Model2RemoteRepo) Get(id int64, shardKey int32, p1 string, m *Model2) (*Model2, error) {
	q := r.qp["get"].GetQuery()
	defer r.qp["get"].Put(q)

	if m == nil {
		m = &Model2{}
	}

	q.Bind(id, shardKey, p1)

	var b []byte
	err := q.Scan(&m.ID, &m.ShardKey, &m.P1, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model2RemoteRepo) GetByP1ShardKeyID(p1 string, shardKey int32, id int64, m *Model2) (*Model2, error) {
	q := r.qp["getByP1ShardKeyID"].GetQuery()
	defer r.qp["getByP1ShardKeyID"].Put(q)

	if m == nil {
		m = &Model2{}
	}

	q.Bind(p1, shardKey, id)

	var b []byte
	err := q.Scan(&m.P1, &m.ShardKey, &m.ID, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model2RemoteRepo) List(pk Model2PrimaryKey, limit uint) ([]*Model2, error) {
	var (
		q   *gocqlx.Queryx
		res []*Model2
		err error
	)

	switch pk := pk.(type) {
	case Model2PK:
		q = r.t.SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.ID, pk.ShardKey)

	case Model2P1ShardKeyIDPK:
		q = r.v["P1ShardKeyID"].SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.P1)

	default:
		panic("BUG!! incorrect mount key")
	}
	err = q.SelectRelease(&res)

	return res, err
}

type Model3RemoteRepo struct {
	qp map[string]*pools.QueryPool
	t  *table.Table
	v  map[string]*table.Table
	s  gocqlx.Session
}

func NewModel3RemoteRepo(s gocqlx.Session) *Model3RemoteRepo {
	r := &Model3RemoteRepo{
		s: s,
		t: table.New(table.Metadata{
			Name:    "tab_model_3",
			Columns: []string{"id", "shard_key", "p_1", "sdata"},
			PartKey: []string{"id", "shard_key"},
			SortKey: []string{"p_1"},
		}),
		v: map[string]*table.Table{
			"P1ShardKeyID": table.New(table.Metadata{
				Name:    "view_model_3_p_1_shard_key_id",
				Columns: []string{"p_1", "shard_key", "id", "sdata"},
				PartKey: []string{"p_1"},
				SortKey: []string{"shard_key", "id"},
			}),
			"P1ID": table.New(table.Metadata{
				Name:    "view_model_3_p_1_id",
				Columns: []string{"p_1", "id", "sdata"},
				PartKey: []string{"p_1"},
				SortKey: []string{"id"},
			}),
		},
	}

	r.qp = map[string]*pools.QueryPool{
		"insertIF": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.InsertBuilder().Unique().Query(s)
		}),
		"insert": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.InsertBuilder().Query(s)
		}),
		"update": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.UpdateBuilder().Set("sdata").Query(s)
		}),
		"delete": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.DeleteBuilder().Query(s)
		}),
		"get": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.t.GetQuery(s)
		}),
		"getByP1ShardKeyID": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.v["P1ShardKeyID"].GetQuery(s)
		}),
		"getByP1ID": pools.NewQueryPool(func() *gocqlx.Queryx {
			return r.v["P1ID"].GetQuery(s)
		}),
	}
	return r
}

func (r *Model3RemoteRepo) Table() *table.Table {
	return r.t
}

func (r *Model3RemoteRepo) T() *table.Table {
	return r.t
}

func (r *Model3RemoteRepo) MVP1ShardKeyID() *table.Table {
	return r.v["P1ShardKeyID"]
}

func (r *Model3RemoteRepo) MVP1ID() *table.Table {
	return r.v["P1ID"]
}

func (r *Model3RemoteRepo) Insert(m *Model3, replace bool) error {
	buf := pools.Buffer.FromProto(m)
	defer pools.Buffer.Put(buf)

	var q *gocqlx.Queryx
	if replace {
		q = r.qp["insertIF"].GetQuery()
		defer r.qp["insertIF"].Put(q)
	} else {
		q = r.qp["insert"].GetQuery()
		defer r.qp["insert"].Put(q)
	}

	q.Bind(m.ID, m.ShardKey, m.P1, *buf.Bytes())
	return q.Exec()
}

func (r *Model3RemoteRepo) Update(m *Model3) error {
	buf := pools.Buffer.FromProto(m)
	defer pools.Buffer.Put(buf)

	q := r.qp["update"].GetQuery()
	defer r.qp["update"].Put(q)

	q.Bind(*buf.Bytes(), m.ID, m.ShardKey, m.P1)
	return q.Exec()
}

func (r *Model3RemoteRepo) Delete(id int64, shardKey int32, p1 []byte) error {
	q := r.qp["delete"].GetQuery()
	defer r.qp["delete"].Put(q)

	q.Bind(id, shardKey, p1)
	return q.Exec()
}

func (r *Model3RemoteRepo) Get(id int64, shardKey int32, p1 []byte, m *Model3) (*Model3, error) {
	q := r.qp["get"].GetQuery()
	defer r.qp["get"].Put(q)

	if m == nil {
		m = &Model3{}
	}

	q.Bind(id, shardKey, p1)

	var b []byte
	err := q.Scan(&m.ID, &m.ShardKey, &m.P1, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model3RemoteRepo) GetByP1ShardKeyID(p1 []byte, shardKey int32, id int64, m *Model3) (*Model3, error) {
	q := r.qp["getByP1ShardKeyID"].GetQuery()
	defer r.qp["getByP1ShardKeyID"].Put(q)

	if m == nil {
		m = &Model3{}
	}

	q.Bind(p1, shardKey, id)

	var b []byte
	err := q.Scan(&m.P1, &m.ShardKey, &m.ID, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model3RemoteRepo) GetByP1ID(p1 []byte, id int64, m *Model3) (*Model3, error) {
	q := r.qp["getByP1ID"].GetQuery()
	defer r.qp["getByP1ID"].Put(q)

	if m == nil {
		m = &Model3{}
	}

	q.Bind(p1, id)

	var b []byte
	err := q.Scan(&m.P1, &m.ID, &b)
	if err != nil {
		return m, err
	}
	err = m.Unmarshal(b)
	return m, err
}

func (r *Model3RemoteRepo) List(pk Model3PrimaryKey, limit uint) ([]*Model3, error) {
	var (
		q   *gocqlx.Queryx
		res []*Model3
		err error
	)

	switch pk := pk.(type) {
	case Model3PK:
		q = r.t.SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.ID, pk.ShardKey)

	case Model3P1ShardKeyIDPK:
		q = r.v["P1ShardKeyID"].SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.P1)

	case Model3P1IDPK:
		q = r.v["P1ID"].SelectBuilder().Limit(limit).Query(r.s)
		q.Bind(pk.P1)

	default:
		panic("BUG!! incorrect mount key")
	}
	err = q.SelectRelease(&res)

	return res, err
}
