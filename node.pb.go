// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package rony

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// edgeNode
type EdgeNode struct {
	ServerID    string `protobuf:"bytes,1,req,name=ServerID" json:"ServerID"`
	ReplicaSet  uint32 `protobuf:"varint,2,opt,name=ReplicaSet" json:"ReplicaSet"`
	ShardSet    uint32 `protobuf:"varint,3,opt,name=ShardSet" json:"ShardSet"`
	RaftPort    uint32 `protobuf:"varint,4,opt,name=RaftPort" json:"RaftPort"`
	ShardMin    uint32 `protobuf:"varint,5,opt,name=ShardMin" json:"ShardMin"`
	ShardMax    uint32 `protobuf:"varint,6,opt,name=ShardMax" json:"ShardMax"`
	GatewayAddr string `protobuf:"bytes,7,req,name=GatewayAddr" json:"GatewayAddr"`
}

func (m *EdgeNode) Reset()         { *m = EdgeNode{} }
func (m *EdgeNode) String() string { return proto.CompactTextString(m) }
func (*EdgeNode) ProtoMessage()    {}
func (*EdgeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}
func (m *EdgeNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeNode.Merge(m, src)
}
func (m *EdgeNode) XXX_Size() int {
	return m.Size()
}
func (m *EdgeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeNode.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeNode proto.InternalMessageInfo

func (m *EdgeNode) GetServerID() string {
	if m != nil {
		return m.ServerID
	}
	return ""
}

func (m *EdgeNode) GetReplicaSet() uint32 {
	if m != nil {
		return m.ReplicaSet
	}
	return 0
}

func (m *EdgeNode) GetShardSet() uint32 {
	if m != nil {
		return m.ShardSet
	}
	return 0
}

func (m *EdgeNode) GetRaftPort() uint32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *EdgeNode) GetShardMin() uint32 {
	if m != nil {
		return m.ShardMin
	}
	return 0
}

func (m *EdgeNode) GetShardMax() uint32 {
	if m != nil {
		return m.ShardMax
	}
	return 0
}

func (m *EdgeNode) GetGatewayAddr() string {
	if m != nil {
		return m.GatewayAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*EdgeNode)(nil), "rony.edgeNode")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcb, 0x4f, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0xca, 0xcf, 0xab, 0x54, 0x6a, 0x62, 0xe2,
	0xe2, 0x48, 0x4d, 0x49, 0x4f, 0xf5, 0xcb, 0x4f, 0x49, 0x15, 0x52, 0xe0, 0xe2, 0x08, 0x4e, 0x2d,
	0x2a, 0x4b, 0x2d, 0xf2, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd2, 0xe0, 0x74, 0x62, 0x39, 0x71, 0x4f,
	0x9e, 0x21, 0x08, 0x2e, 0x2a, 0xa4, 0xc2, 0xc5, 0x15, 0x94, 0x5a, 0x90, 0x93, 0x99, 0x9c, 0x18,
	0x9c, 0x5a, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x0b, 0x55, 0x83, 0x24, 0x0e, 0x36, 0x27, 0x23,
	0xb1, 0x28, 0x05, 0xa4, 0x86, 0x19, 0x49, 0x0d, 0x5c, 0x14, 0xa4, 0x22, 0x28, 0x31, 0xad, 0x24,
	0x20, 0xbf, 0xa8, 0x44, 0x82, 0x05, 0x59, 0x05, 0x4c, 0x14, 0x6e, 0x86, 0x6f, 0x66, 0x9e, 0x04,
	0x2b, 0x86, 0x19, 0xbe, 0x99, 0x79, 0x08, 0x15, 0x89, 0x15, 0x12, 0x6c, 0x98, 0x2a, 0x12, 0x2b,
	0x84, 0xd4, 0xb8, 0xb8, 0xdd, 0x13, 0x4b, 0x52, 0xcb, 0x13, 0x2b, 0x1d, 0x53, 0x52, 0x8a, 0x24,
	0xd8, 0x91, 0xbc, 0x84, 0x2c, 0xe1, 0x24, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x22, 0xb1, 0xa0, 0x31, 0x01, 0x00, 0x00,
}

func (m *EdgeNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.GatewayAddr)
	copy(dAtA[i:], m.GatewayAddr)
	i = encodeVarintNode(dAtA, i, uint64(len(m.GatewayAddr)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintNode(dAtA, i, uint64(m.ShardMax))
	i--
	dAtA[i] = 0x30
	i = encodeVarintNode(dAtA, i, uint64(m.ShardMin))
	i--
	dAtA[i] = 0x28
	i = encodeVarintNode(dAtA, i, uint64(m.RaftPort))
	i--
	dAtA[i] = 0x20
	i = encodeVarintNode(dAtA, i, uint64(m.ShardSet))
	i--
	dAtA[i] = 0x18
	i = encodeVarintNode(dAtA, i, uint64(m.ReplicaSet))
	i--
	dAtA[i] = 0x10
	i -= len(m.ServerID)
	copy(dAtA[i:], m.ServerID)
	i = encodeVarintNode(dAtA, i, uint64(len(m.ServerID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EdgeNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerID)
	n += 1 + l + sovNode(uint64(l))
	n += 1 + sovNode(uint64(m.ReplicaSet))
	n += 1 + sovNode(uint64(m.ShardSet))
	n += 1 + sovNode(uint64(m.RaftPort))
	n += 1 + sovNode(uint64(m.ShardMin))
	n += 1 + sovNode(uint64(m.ShardMax))
	l = len(m.GatewayAddr)
	n += 1 + l + sovNode(uint64(l))
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EdgeNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: edgeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: edgeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaSet", wireType)
			}
			m.ReplicaSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaSet |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardSet", wireType)
			}
			m.ShardSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardSet |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftPort", wireType)
			}
			m.RaftPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardMin", wireType)
			}
			m.ShardMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardMax", wireType)
			}
			m.ShardMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GatewayAddr")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
