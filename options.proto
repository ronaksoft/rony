syntax = "proto2";
import "google/protobuf/descriptor.proto";
option go_package = "github.com/ronaksoft/rony";

extend google.protobuf.FileOptions {
    // rony_repo defines what kind of rony repos will be used for messages with 'rony_model' or 'rony_singleton' options enabled.
    // POSSIBLE VALUES: "local", "cql"
    optional string rony_repo = 50001;
}

extend google.protobuf.ServiceOptions {
    // rony_cobra_cmd generates the boiler plate code for client stub of rpc methods, using cobra package.
    optional bool rony_cobra_cmd = 50001;
    // rony_cobra_cmd_protocol defines what protocol should client use to communicate with server.
    // POSSIBLE VALUES: "ws", "http"
    optional string rony_cobra_cmd_protocol = 50002;
}

extend google.protobuf.MethodOptions {
    // inconsistent_read marks this method that it could be called on nodes with FOLLOWER state. Otherwise methods could only
    // be executed on LEADER nodes.
    optional bool inconsistent_read = 50001;
}

extend google.protobuf.MessageOptions {
    // rony_aggregate marks this message as an aggregate, then 'rony_table' and 'rony_view' options become available for this
    // message.
    optional bool rony_aggregate = 50001;
    // rony_singleton marks this message as a singleton.
    // NOTE: a message could either have 'rony_aggregate' ro 'rony_singleton' options at a same time. Setting both
    // cause unpredictable results.
    optional bool rony_singleton = 50002;
    // rony_aggregate_type makes the code generator to generate appropriate functions based on the way you are going
    // to handle actions on the aggregate.
    // POSSIBLE_VALUES: "crud", "eventsource"
    optional string rony_aggregate_type = 50010;
    // rony_aggregate_command makes this message as a command which is ONLY used if rony_aggregate_type is set to 'eventsource'.
    // If this option is set then you MUST also define rony_aggregate_link to identify which aggregate this command will work on.
    optional bool rony_aggregate_command = 50011;
    // rony_aggregate_event makes this message as an event which is ONLY used if rony_aggregate_type is set to 'eventsource'
    // If this option is set then you MUST also define rony_aggregate_link to identify which aggregate this event will be read from.
    optional bool rony_aggregate_event = 50012;
    // rony_aggregate_link is the name of the aggregate message which we link this message to.
    optional string rony_aggregate_link = 50013;
    // rony_aggregate_table creates a virtual table presentation to hold instances of this message, like rows in a table
    // PRIMARY KEY FORMAT: ( (partitionKey1, partitionKey2, ...), clusteringKey1, clusteringKey2, ...)
    // NOTE: If there is only one partition key then you could safely drop the parenthesis, i.e. (pk1, ck1, ck2)
    optional string rony_aggregate_table = 50014;
    // rony_aggregate_view creates a materialized view of the aggregate based on the primary key.
    // PRIMARY KEY FORMAT: ( (partitionKey1, partitionKey2, ...), clusteringKey1, clusteringKey2, ...)
    // NOTE (1): If there is only one partition key then you could safely drop the parenthesis, i.e. (pk1, ck1, ck2)
    // NOTE (2): The primary key of the model must contains all the primary key items of the table. They don't need to
    //           follow the same order as table. for example the following is correct:
    //                  rony_aggregate_table = ((a, b), c)
    //                  rony_aggregate_view = ((c, a), d, b)
    optional string rony_aggregate_view = 50015;

}

extend google.protobuf.FieldOptions {
    optional bool rony_index = 50001;
}