{
  "packages": [
    {
      "name": "udpTunnel",
      "path": "github.com/ronaksoft/rony/internal/tunnel/udp",
      "imported": [
        "github.com/panjf2000/gnet",
        "github.com/ronaksoft/rony/internal/metrics",
        "net",
        "fmt",
        "sync",
        "go.uber.org/zap",
        "github.com/ronaksoft/rony/internal/tunnel",
        "github.com/ronaksoft/rony/tools",
        "github.com/ronaksoft/rony/internal/log",
        "github.com/ronaksoft/rony/internal/msg",
        "time",
        "github.com/ronaksoft/rony/pools",
        "sync/atomic"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": [
        "New(config Config)"
      ]
    },
    {
      "name": "edge",
      "path": "github.com/ronaksoft/rony/edge",
      "imported": [
        "google.golang.org/protobuf/proto",
        "github.com/ronaksoft/rony/internal/log",
        "github.com/ronaksoft/rony/registry",
        "github.com/ronaksoft/rony/internal/cluster/gossip",
        "github.com/ronaksoft/rony/internal/gateway/tcp",
        "github.com/ronaksoft/rony/internal/metrics",
        "sync",
        "github.com/ronaksoft/rony/pools",
        "fmt",
        "github.com/ronaksoft/rony",
        "bufio",
        "time",
        "github.com/ronaksoft/rony/internal/gateway/dummy",
        "github.com/ronaksoft/rony/internal/tunnel",
        "github.com/ronaksoft/rony/rest",
        "go.uber.org/zap",
        "github.com/ronaksoft/rony/errors",
        "github.com/ronaksoft/rony/internal/store/localdb",
        "github.com/ronaksoft/rony/internal/msg",
        "github.com/ronaksoft/rony/internal/gateway",
        "os/signal",
        "os",
        "reflect",
        "github.com/ronaksoft/rony/internal/tunnel/udp",
        "runtime/debug",
        "github.com/ronaksoft/rony/store",
        "github.com/ronaksoft/rony/internal/cluster",
        "github.com/ronaksoft/rony/tools",
        "github.com/dgraph-io/badger/v3"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/testEnv/pb/service",
        "github.com/ronaksoft/rony/internal/testEnv/pb/model",
        "github.com/ronaksoft/rony/edgetest",
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/testEnv/pb/singleton",
        "github.com/ronaksoft/rony/internal/templates/skel/cmd/cli-project",
        "github.com/ronaksoft/rony/internal/testEnv"
      ],
      "imports": [
        "NewServer(serverID string, opts ...Option)",
        "NewHandlerOptions()",
        "WithDispatcher(d Dispatcher)",
        "WithUdpTunnel(config UdpTunnelConfig)",
        "WithTestGateway(gatewayConfig DummyGatewayConfig)",
        "WithDataDir(path string)",
        "WithGossipCluster(clusterConfig GossipClusterConfig)",
        "WithTcpGateway(gatewayConfig TcpGatewayConfig)"
      ]
    },
    {
      "name": "main",
      "path": "github.com/ronaksoft/rony/internal/testEnv/ws-load-tester",
      "imported": [
        "github.com/ronaksoft/rony/internal/log",
        "github.com/gobwas/ws/wsutil",
        "github.com/gobwas/ws",
        "context",
        "fmt",
        "net",
        "sync",
        "os",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service",
        "github.com/ronaksoft/rony",
        "go.uber.org/zap",
        "time",
        "github.com/ronaksoft/rony/tools",
        "sync/atomic"
      ],
      "importedBy": [],
      "imports": []
    },
    {
      "name": "aggregate",
      "path": "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/aggregate",
      "imported": [
        "github.com/ronaksoft/rony",
        "github.com/jinzhu/inflection",
        "hash/crc32",
        "github.com/ronaksoft/rony/tools",
        "strings",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/z",
        "google.golang.org/protobuf/compiler/protogen",
        "google.golang.org/protobuf/proto",
        "google.golang.org/protobuf/reflect/protoreflect",
        "github.com/ronaksoft/rony/internal/parser",
        "google.golang.org/protobuf/types/descriptorpb",
        "hash/crc64",
        "fmt"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony"
      ],
      "imports": [
        "New(f *protogen.File, g *protogen.GeneratedFile)"
      ]
    },
    {
      "name": "singleton",
      "path": "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/singleton",
      "imported": [
        "fmt",
        "github.com/ronaksoft/rony",
        "google.golang.org/protobuf/compiler/protogen",
        "google.golang.org/protobuf/proto",
        "google.golang.org/protobuf/types/descriptorpb"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony"
      ],
      "imports": [
        "New(f *protogen.File, g *protogen.GeneratedFile)"
      ]
    },
    {
      "name": "main",
      "path": "github.com/ronaksoft/rony/cmd/protoc-gen-gorony",
      "imported": [
        "fmt",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/aggregate",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/helper",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/singleton",
        "google.golang.org/protobuf/compiler/protogen",
        "strings"
      ],
      "importedBy": [],
      "imports": []
    },
    {
      "name": "tunnel",
      "path": "github.com/ronaksoft/rony/internal/tunnel",
      "imported": [
        "github.com/ronaksoft/rony/internal/msg",
        "github.com/ronaksoft/rony"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/tunnel/udp",
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": []
    },
    {
      "name": "tcpGateway",
      "path": "github.com/ronaksoft/rony/internal/gateway/tcp",
      "imported": [
        "github.com/ronaksoft/rony/pools",
        "sync/atomic",
        "github.com/panjf2000/ants/v2",
        "net",
        "os",
        "errors",
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/tools",
        "github.com/ronaksoft/rony/internal/metrics",
        "net/http",
        "time",
        "github.com/ronaksoft/rony/internal/trie",
        "fmt",
        "go.uber.org/zap",
        "github.com/valyala/tcplisten",
        "sync",
        "io",
        "github.com/allegro/bigcache/v2",
        "github.com/ronaksoft/rony/internal/gateway/tcp/util",
        "bytes",
        "github.com/ronaksoft/rony/internal/log",
        "github.com/gobwas/ws",
        "encoding/binary",
        "github.com/valyala/fasthttp",
        "github.com/mailru/easygo/netpoll",
        "github.com/ronaksoft/rony/internal/gateway"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": [
        "MustNew(config Config)",
        "New(config Config)"
      ]
    },
    {
      "name": "service",
      "path": "github.com/ronaksoft/rony/internal/testEnv/pb/service",
      "imported": [
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony",
        "sync",
        "github.com/ronaksoft/rony/config",
        "reflect",
        "github.com/ronaksoft/rony/errors",
        "github.com/ronaksoft/rony/registry",
        "github.com/spf13/cobra",
        "google.golang.org/protobuf/runtime/protoimpl",
        "github.com/ronaksoft/rony/edgec",
        "google.golang.org/protobuf/proto",
        "google.golang.org/protobuf/reflect/protoreflect",
        "fmt"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/testEnv/ws-load-tester",
        "github.com/ronaksoft/rony/internal/testEnv"
      ],
      "imports": [
        "RegisterSample(h ISample, e *edge.Server, preHandlers ...edge.Handler)",
        "RegisterSampleWithFunc(h ISample, e *edge.Server, handlerFunc func (c int64))",
        "TunnelRequestSampleEcho(ctx *edge.RequestCtx, replicaSet uint64, req *EchoRequest, res *EchoResponse, kvs ...*rony.KeyValue)",
        "RegisterSampleCli(h ISampleCli, c edgec.Client, rootCmd *cobra.Command)",
        "TunnelRequestSampleSet(ctx *edge.RequestCtx, replicaSet uint64, req *SetRequest, res *SetResponse, kvs ...*rony.KeyValue)",
        "TunnelRequestSampleEchoDelay(ctx *edge.RequestCtx, replicaSet uint64, req *EchoRequest, res *EchoResponse, kvs ...*rony.KeyValue)",
        "NewSampleClient(ec edgec.Client)",
        "TunnelRequestSampleEchoInternal(ctx *edge.RequestCtx, replicaSet uint64, req *EchoRequest, res *EchoResponse, kvs ...*rony.KeyValue)",
        "TunnelRequestSampleGet(ctx *edge.RequestCtx, replicaSet uint64, req *GetRequest, res *GetResponse, kvs ...*rony.KeyValue)",
        "TunnelRequestSampleEchoTunnel(ctx *edge.RequestCtx, replicaSet uint64, req *EchoRequest, res *EchoResponse, kvs ...*rony.KeyValue)"
      ]
    },
    {
      "name": "config",
      "path": "github.com/ronaksoft/rony/config",
      "imported": [
        "time",
        "github.com/spf13/cobra",
        "github.com/spf13/pflag",
        "github.com/spf13/viper",
        "strings"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/rony/cmd",
        "github.com/ronaksoft/rony/internal/templates/skel/cmd/cli-project",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service"
      ],
      "imports": [
        "Set(key string, val interface{})",
        "GetInt64(key string)",
        "GetUint(key string)",
        "GetStringSlice(key string)",
        "GetDuration(key string)",
        "MustInit(configFileName string, configSearchPaths ...string)",
        "SetEnvPrefix(prefix string)",
        "BindCmdFlags(cmd *cobra.Command)",
        "GetInt32Slice(key string)",
        "GetInt64Slice(key string)",
        "SetCmdFlags(cmd *cobra.Command, opts ...FlagOption)",
        "GetUint64(key string)",
        "GetUint32(key string)",
        "GetIntSlice(key string)",
        "GetTime(key string)",
        "GetBool(key string)",
        "GetString(key string)",
        "GetInt32(key string)",
        "Init(configFileName string, configSearchPaths ...string)",
        "SetCmdPersistentFlags(cmd *cobra.Command, opts ...FlagOption)",
        "GetInt(key string)",
        "SetPersistentFlags(cmd *cobra.Command, opts ...FlagOption)",
        "IntFlag(name string, value int, usage string)",
        "Int32Flag(name string, value int32, usage string)",
        "Uint32Flag(name string, value uint32, usage string)",
        "Int64Flag(name string, value int64, usage string)",
        "BoolFlag(name string, value bool, usage string)",
        "DurationFlag(name string, value time.Duration, usage string)",
        "SetFlags(cmd *cobra.Command, opts ...FlagOption)",
        "StringFlag(name, value, usage string)",
        "Uint64Flag(name string, value uint64, usage string)",
        "StringSliceFlag(name string, value []string, usage string)",
        "Int64SliceFlag(name string, value []int64, usage string)"
      ]
    },
    {
      "name": "model",
      "path": "github.com/ronaksoft/rony/internal/testEnv/pb/model",
      "imported": [
        "sync",
        "github.com/ronaksoft/rony",
        "reflect",
        "github.com/ronaksoft/rony/registry",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/tools",
        "google.golang.org/protobuf/reflect/protoreflect",
        "google.golang.org/protobuf/runtime/protoimpl",
        "google.golang.org/protobuf/proto",
        "github.com/ronaksoft/rony/store"
      ],
      "importedBy": [],
      "imports": [
        "UpdateModel1(id int32, shardKey int32, m *Model1)",
        "SaveModel1WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Model1)",
        "ListModel1ByP2(p2 string, lo *store.ListOption, cond func (m *Model1))",
        "UpdateModel2WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Model2)",
        "IterModel1ByEnum(txn *store.LTxn, alloc *tools.Allocator, enum Enum, cb func (m *Model1))",
        "SaveModel2(m *Model2)",
        "IterModel2ByP1(txn *store.LTxn, alloc *tools.Allocator, p1 string, cb func (m *Model2))",
        "IterModel1(txn *store.LTxn, alloc *tools.Allocator, cb func (m *Model1), orderBy ...Model1Order)",
        "ListModel2ByP1(p1 string, offsetShardKey int32, offsetID int64, lo *store.ListOption, cond func (m *Model2))",
        "IterModel1ByID(txn *store.LTxn, alloc *tools.Allocator, id int32, cb func (m *Model1))",
        "ReadModel2(id int64, shardKey int32, p1 string, m *Model2)",
        "ListModel2ByIDAndShardKey(id int64, shardKey int32, offsetP1 string, lo *store.ListOption, cond func (m *Model2))",
        "ReadModel2ByP1AndShardKeyAndID(p1 string, shardKey int32, id int64, m *Model2)",
        "ReadModel1ByEnumAndShardKeyAndID(enum Enum, shardKey int32, id int32, m *Model1)",
        "DeleteModel1WithTxn(txn *store.LTxn, alloc *tools.Allocator, id int32, shardKey int32)",
        "DeleteModel1(id int32, shardKey int32)",
        "SaveModel1(m *Model1)",
        "ReadModel1ByEnumAndShardKeyAndIDWithTxn(txn *store.LTxn, alloc *tools.Allocator, enum Enum, shardKey int32, id int32, m *Model1)",
        "ListModel1(offsetID int32, offsetShardKey int32, lo *store.ListOption, cond func (m *Model1), orderBy ...Model1Order)",
        "ListModel1ByEnum(enum Enum, offsetShardKey int32, offsetID int32, lo *store.ListOption, cond func (m *Model1))",
        "CreateModel2(m *Model2)",
        "DeleteModel2(id int64, shardKey int32, p1 string)",
        "CreateModel1(m *Model1)",
        "CreateModel2WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Model2)",
        "UpdateModel2(id int64, shardKey int32, p1 string, m *Model2)",
        "IterModel2ByIDAndShardKey(txn *store.LTxn, alloc *tools.Allocator, id int64, shardKey int32, cb func (m *Model2))",
        "ReadModel1(id int32, shardKey int32, m *Model1)",
        "ListModel1ByID(id int32, offsetShardKey int32, lo *store.ListOption, cond func (m *Model1))",
        "ReadModel2WithTxn(txn *store.LTxn, alloc *tools.Allocator, id int64, shardKey int32, p1 string, m *Model2)",
        "SaveModel2WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Model2)",
        "ReadModel2ByP1AndShardKeyAndIDWithTxn(txn *store.LTxn, alloc *tools.Allocator, p1 string, shardKey int32, id int64, m *Model2)",
        "DeleteModel2WithTxn(txn *store.LTxn, alloc *tools.Allocator, id int64, shardKey int32, p1 string)",
        "IterModel2(txn *store.LTxn, alloc *tools.Allocator, cb func (m *Model2), orderBy ...Model2Order)",
        "CreateModel1WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Model1)",
        "ReadModel1WithTxn(txn *store.LTxn, alloc *tools.Allocator, id int32, shardKey int32, m *Model1)",
        "UpdateModel1WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Model1)",
        "ListModel1ByP1(p1 string, lo *store.ListOption, cond func (m *Model1))",
        "ListModel2(offsetID int64, offsetShardKey int32, offsetP1 string, lo *store.ListOption, cond func (m *Model2), orderBy ...Model2Order)"
      ]
    },
    {
      "name": "trie",
      "path": "github.com/ronaksoft/rony/internal/trie",
      "imported": [
        "strings",
        "github.com/ronaksoft/rony/internal/gateway",
        "net/http",
        "sort"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/gateway/tcp"
      ],
      "imports": [
        "NewNode()",
        "GetParam(w http.ResponseWriter, key string)",
        "GetParams(w http.ResponseWriter)",
        "SetParam(w http.ResponseWriter, key, value string)",
        "WithProxyFactory(proxy gateway.ProxyFactory)",
        "WithTag(tag string)",
        "NewTrie()",
        "WithData(data interface{})"
      ]
    },
    {
      "name": "registry",
      "path": "github.com/ronaksoft/rony/registry",
      "imported": [
        "fmt"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/templates/skel/cmd/cli-project",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service",
        "github.com/ronaksoft/rony/internal/testEnv/pb/model",
        "github.com/ronaksoft/rony/internal/msg",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/testEnv/pb/singleton"
      ],
      "imports": [
        "RegisterConstructor(c int64, n string)",
        "ConstructorName(c int64)"
      ]
    },
    {
      "name": "metrics",
      "path": "github.com/ronaksoft/rony/internal/metrics",
      "imported": [
        "github.com/prometheus/client_golang/prometheus"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/tunnel/udp",
        "github.com/ronaksoft/rony/store",
        "github.com/ronaksoft/rony/internal/store/localdb",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/gateway/tcp"
      ],
      "imports": [
        "AddCounter(name string, v float64)",
        "Init(constLabels map[string]string)",
        "Register(registerer prometheus.Registerer)",
        "AddCounterVec(name string, v float64, labelValues ...string)",
        "SetGauge(name string, v float64)",
        "IncCounter(name string)",
        "InCounterVec(name string, labelValues ...string)",
        "ObserveHistogram(name string, v float64)",
        "NewPrometheus(ns string, constLabels map[string]string)"
      ]
    },
    {
      "name": "wsutil",
      "path": "github.com/ronaksoft/rony/internal/gateway/tcp/util",
      "imported": [
        "io/ioutil",
        "bytes",
        "errors",
        "fmt",
        "github.com/gobwas/pool",
        "github.com/gobwas/ws",
        "github.com/ronaksoft/rony/pools",
        "io"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edgec",
        "github.com/ronaksoft/rony/internal/gateway/tcp"
      ],
      "imports": [
        "NewCipherReader(r io.Reader, mask []byte)",
        "NewCipherWriter(w io.Writer, mask []byte)",
        "ReadMessage(r io.Reader, s ws.State, m []Message)",
        "WriteMessage(w io.Writer, s ws.State, op ws.OpCode, p []byte)",
        "NewReader(r io.Reader, s ws.State)",
        "NewWriterBufferSize(dest io.Writer, state ws.State, op ws.OpCode, n int)",
        "PutWriter(w *Writer)",
        "NewWriter(dest io.Writer, state ws.State, op ws.OpCode)",
        "NewWriterSize(dest io.Writer, state ws.State, op ws.OpCode, n int)",
        "NewWriterBuffer(dest io.Writer, state ws.State, op ws.OpCode, buf []byte)",
        "NewControlWriter(dest io.Writer, state ws.State, op ws.OpCode)",
        "NewControlWriterBuffer(dest io.Writer, state ws.State, op ws.OpCode, buf []byte)",
        "GetWriter(dest io.Writer, state ws.State, op ws.OpCode, n int)"
      ]
    },
    {
      "name": "gateway",
      "path": "github.com/ronaksoft/rony/internal/gateway",
      "imported": [
        "google.golang.org/protobuf/proto",
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/pools",
        "github.com/valyala/fasthttp"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/testEnv",
        "github.com/ronaksoft/rony/internal/trie",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/gateway/tcp",
        "github.com/ronaksoft/rony/internal/gateway/dummy",
        "github.com/ronaksoft/rony/rest"
      ],
      "imports": [
        "NewBodyWriter()",
        "NewHeaderWriter()"
      ]
    },
    {
      "name": "testEnv",
      "path": "github.com/ronaksoft/rony/internal/testEnv",
      "imported": [
        "go.uber.org/zap",
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/internal/log",
        "github.com/ronaksoft/rony/edgetest",
        "github.com/ronaksoft/rony/pools",
        "sync/atomic",
        "time",
        "fmt",
        "github.com/ronaksoft/rony/internal/gateway",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service",
        "google.golang.org/protobuf/proto",
        "os"
      ],
      "importedBy": [],
      "imports": [
        "Init()",
        "ReceivedMessages()",
        "ReceivedUpdates()",
        "InitEdgeServer(serverID string, listenPort int, concurrency int, opts ...edge.Option)",
        "InitTestServer(serverID string)",
        "ResetCounters()"
      ]
    },
    {
      "name": "benchs",
      "path": "github.com/ronaksoft/rony/internal/testEnv/benchs",
      "imported": [],
      "importedBy": [],
      "imports": []
    },
    {
      "name": "errors",
      "path": "github.com/ronaksoft/rony/errors",
      "imported": [
        "fmt",
        "github.com/ronaksoft/rony",
        "sync"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edgec",
        "github.com/ronaksoft/rony/internal/cluster/gossip",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service"
      ],
      "imports": [
        "NewF(code Code, item string, format string, args ...interface{})",
        "Message(reqID uint64, errCode Code, errItem string)",
        "ToMessage(out *rony.MessageEnvelope, reqID uint64, errCode Code, errItem string)",
        "New(code Code, item string)",
        "Wrap(txt string)"
      ]
    },
    {
      "name": "edgetest",
      "path": "github.com/ronaksoft/rony/edgetest",
      "imported": [
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony",
        "sync",
        "time",
        "sync/atomic",
        "fmt",
        "github.com/ronaksoft/rony/internal/gateway/dummy",
        "github.com/ronaksoft/rony/tools",
        "google.golang.org/protobuf/proto"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/testEnv"
      ],
      "imports": [
        "NewServer(serverID string, d edge.Dispatcher)"
      ]
    },
    {
      "name": "singleton",
      "path": "github.com/ronaksoft/rony/internal/testEnv/pb/singleton",
      "imported": [
        "google.golang.org/protobuf/reflect/protoreflect",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/store",
        "google.golang.org/protobuf/proto",
        "reflect",
        "github.com/ronaksoft/rony/registry",
        "github.com/ronaksoft/rony/tools",
        "github.com/ronaksoft/rony",
        "google.golang.org/protobuf/runtime/protoimpl",
        "sync"
      ],
      "importedBy": [],
      "imports": [
        "ReadSingle1(m *Single1)",
        "SaveSingle2(m *Single2)",
        "SaveSingle1WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Single1)",
        "ReadSingle2WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Single2)",
        "ReadSingle2(m *Single2)",
        "SaveSingle1(m *Single1)",
        "ReadSingle1WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Single1)",
        "SaveSingle2WithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Single2)"
      ]
    },
    {
      "name": "log",
      "path": "github.com/ronaksoft/rony/internal/log",
      "imported": [
        "time",
        "github.com/getsentry/sentry-go",
        "go.uber.org/zap",
        "go.uber.org/zap/zapcore",
        "os",
        "path/filepath"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/tools",
        "github.com/ronaksoft/rony/internal/cluster/gossip",
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/testEnv/ws-load-tester",
        "github.com/ronaksoft/rony/internal/gateway/tcp",
        "github.com/ronaksoft/rony/edgec",
        "github.com/ronaksoft/rony/internal/tunnel/udp",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/testEnv"
      ],
      "imports": [
        "PanicOnError(guideText string, err error, args ...interface{})",
        "ErrorOnError(guideText string, err error, args ...interface{})",
        "WarnOnError(guideText string, err error, args ...interface{})",
        "Debug(msg string, fields ...Field)",
        "Info(msg string, fields ...Field)",
        "Fatal(msg string, fields ...Field)",
        "Check(level Level, msg string)",
        "Warn(msg string, fields ...Field)",
        "Init(config Config)",
        "Error(msg string, fields ...Field)",
        "SetLevel(level Level)",
        "NewSentryCore(sentryDSN, release, environment string, level zapcore.Level, tags map[string]string)"
      ]
    },
    {
      "name": "helper",
      "path": "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/helper",
      "imported": [
        "google.golang.org/protobuf/reflect/protoreflect",
        "hash/crc32",
        "strings",
        "fmt",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/z",
        "google.golang.org/protobuf/compiler/protogen"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony"
      ],
      "imports": [
        "New(f *protogen.File, g *protogen.GeneratedFile, plugins map[string]*ast.StructType)"
      ]
    },
    {
      "name": "edgec",
      "path": "github.com/ronaksoft/rony/edgec",
      "imported": [
        "google.golang.org/protobuf/proto",
        "github.com/gobwas/ws",
        "fmt",
        "github.com/valyala/fasthttp",
        "github.com/ronaksoft/rony/tools",
        "sync",
        "go.uber.org/zap",
        "time",
        "github.com/ronaksoft/rony/internal/gateway/tcp/util",
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/pools",
        "github.com/ronaksoft/rony/internal/log",
        "sync/atomic",
        "net",
        "strings",
        "github.com/ronaksoft/rony/errors",
        "context",
        "net/http"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/templates/skel/cmd/cli-project",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service"
      ],
      "imports": [
        "NewHttp(config HttpConfig)",
        "NewWebsocket(config WebsocketConfig)"
      ]
    },
    {
      "name": "main",
      "path": "github.com/ronaksoft/rony/cmd/rony",
      "imported": [
        "github.com/ronaksoft/rony/cmd/rony/cmd"
      ],
      "importedBy": [],
      "imports": []
    },
    {
      "name": "localdb",
      "path": "github.com/ronaksoft/rony/internal/store/localdb",
      "imported": [
        "path/filepath",
        "time",
        "github.com/dgraph-io/badger/v3",
        "github.com/ronaksoft/rony/internal/metrics",
        "github.com/ronaksoft/rony/store",
        "github.com/ronaksoft/rony/tools"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": [
        "DefaultConfig(dataPath string)",
        "New(cfg Config)"
      ]
    },
    {
      "name": "dummyGateway",
      "path": "github.com/ronaksoft/rony/internal/gateway/dummy",
      "imported": [
        "github.com/ronaksoft/rony/internal/gateway",
        "sync",
        "sync/atomic",
        "github.com/ronaksoft/rony"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edgetest",
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": [
        "New(config Config)"
      ]
    },
    {
      "name": "tools",
      "path": "github.com/ronaksoft/rony/tools",
      "imported": [
        "sync",
        "runtime",
        "github.com/nyaruka/phonenumbers",
        "math/big",
        "crypto/x509/pkix",
        "github.com/ronaksoft/rony/internal/log",
        "os",
        "github.com/c-bata/go-prompt",
        "io",
        "go.uber.org/zap",
        "crypto/x509",
        "errors",
        "github.com/spf13/cobra",
        "github.com/ronaksoft/rony/pools",
        "io/ioutil",
        "reflect",
        "crypto/rsa",
        "os/exec",
        "sync/atomic",
        "crypto/tls",
        "crypto/sha512",
        "net",
        "crypto/sha256",
        "strings",
        "unsafe",
        "crypto/rand",
        "fmt",
        "time",
        "encoding/binary",
        "github.com/spf13/pflag",
        "encoding/pem",
        "bytes",
        "math/rand",
        "hash",
        "regexp",
        "google.golang.org/protobuf/proto",
        "strconv"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/testEnv/pb/model",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/templates/skel/cmd/cli-project",
        "github.com/ronaksoft/rony/store",
        "github.com/ronaksoft/rony/edgec",
        "github.com/ronaksoft/rony/internal/tunnel/udp",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/aggregate",
        "github.com/ronaksoft/rony/internal/msg",
        "github.com/ronaksoft/rony/edgetest",
        "github.com/ronaksoft/rony/internal/store/localdb",
        "github.com/ronaksoft/rony/internal/testEnv/ws-load-tester",
        "github.com/ronaksoft/rony/internal/gateway/tcp",
        "github.com/ronaksoft/rony/internal/testEnv/pb/singleton",
        "github.com/ronaksoft/rony/rest",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc",
        "github.com/ronaksoft/rony/internal/cluster/gossip",
        "github.com/ronaksoft/rony/cmd/cli-playground"
      ],
      "imports": [
        "NewAllocator()",
        "CertTemplate()",
        "CreateCert(template, parent *x509.Certificate, pub interface{}, parentPriv interface{})",
        "GenerateSelfSignedCerts(keyPath, certPath string)",
        "GetCertificate(keyPath, certPath string)",
        "RegisterIntFlag(name string, value int, usage string)",
        "RegisterStringSliceFlag(name string, value []string, usage string)",
        "SetFlags(cmd *cobra.Command, opts ...FlagOption)",
        "SetPersistentFlags(cmd *cobra.Command, opts ...FlagOption)",
        "RegisterBoolFlag(name string, value bool, usage string)",
        "RegisterInt32Flag(name string, value int32, usage string)",
        "PromptExecutor(rootCmd *cobra.Command)",
        "RegisterStringFlag(name, value, usage string)",
        "RegisterUInt64Flag(name string, value uint64, usage string)",
        "RegisterDurationFlag(name string, value time.Duration, usage string)",
        "RegisterInt64SliceFlag(name string, value []int64, usage string)",
        "RegisterInt64Flag(name string, value int64, usage string)",
        "PromptCompleter(rootCmd *cobra.Command)",
        "NewPipeCommands(cmds ...*exec.Cmd)",
        "NewEntry(v interface{})",
        "NewEntryWithCallback(v interface{}, cb func ())",
        "NewFlusherPoolWithWaitTime(maxWorkers, batchSize int32, minWaitTime time.Duration, f FlusherFunc)",
        "NewFlusherPool(maxWorkers, batchSize int32, f FlusherFunc)",
        "Sha256(in, out []byte)",
        "MustSha256(in, out []byte)",
        "Sha512(in, out []byte)",
        "MustSha512(in, out []byte)",
        "NewLinkedList()",
        "SanitizePhone(phoneNumber string, defaultRegion string)",
        "GetCountryCode(phone string)",
        "RandomID(n int)",
        "RandomDigit(n int)",
        "RandomInt(n int)",
        "FastRand()",
        "RandomInt64(n int64)",
        "RandomUint64(n uint64)",
        "SecureRandomUint64()",
        "SecureRandomInt63(n int64)",
        "TrySlow(f RetryableFunc)",
        "TrySuperFast(f RetryableFunc)",
        "Try(attempts int, waitTime time.Duration, f RetryableFunc)",
        "TryFast(f RetryableFunc)",
        "SliceInt64Diff(a, b []int64, cb func ( int64))",
        "SliceUint64Diff(a, b []uint64, cb func ( uint64))",
        "SliceUintDiff(a, b []uint, cb func ( uint))",
        "SliceStringDiff(a, b []string, cb func ( string))",
        "SliceBytesDiff(a, b []*ast.ArrayType, cb func ( []byte))",
        "DeleteItemFromSlice(slice interface{}, index int)",
        "SliceUint32Diff(a, b []uint32, cb func ( uint32))",
        "SliceIntDiff(a, b []int, cb func ( int))",
        "SliceInt32Diff(a, b []int32, cb func ( int32))",
        "AppendStrUInt32(sb *strings.Builder, x uint32)",
        "StrToInt64(s string)",
        "StrToInt32(s string)",
        "Int32ToStr(x int32)",
        "UInt32ToStr(x uint32)",
        "IntToStr(x int)",
        "ByteToStr(bts []byte)",
        "AppendStrInt(sb *strings.Builder, x int)",
        "AppendStrUInt(sb *strings.Builder, x uint)",
        "AppendStrInt64(sb *strings.Builder, x int64)",
        "StrToUInt64(s string)",
        "B2S(bts []byte)",
        "S2B(str string)",
        "AppendStrUInt64(sb *strings.Builder, x uint64)",
        "AppendStrInt32(sb *strings.Builder, x int32)",
        "StrToInt(s string)",
        "Int64ToStr(x int64)",
        "UInt64ToStr(x uint64)",
        "StrToUInt32(s string)",
        "StrToByte(str string)",
        "TimeUnix()",
        "Duration(t int64)",
        "NanoTime()",
        "CPUTicks()",
        "ToScreamingDelimited(s string, delimiter uint8, ignore uint8, screaming bool)",
        "ToSnakeWithIgnore(s string, ignore uint8)",
        "ToScreamingSnake(s string)",
        "ToScreamingKebab(s string)",
        "ToDelimited(s string, delimiter uint8)",
        "ToSnake(s string)",
        "ToKebab(s string)",
        "ToCamel(s string)",
        "ToLowerCamel(s string)"
      ]
    },
    {
      "name": "parse",
      "path": "github.com/ronaksoft/rony/internal/parser",
      "imported": [
        "fmt",
        "runtime",
        "strings",
        "unicode",
        "unicode/utf8"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/aggregate"
      ],
      "imports": [
        "Parse(name, text string)",
        "New(name string)"
      ]
    },
    {
      "name": "cmd",
      "path": "github.com/ronaksoft/rony/cmd/rony/cmd",
      "imported": [
        "strings",
        "os/exec",
        "github.com/gobuffalo/genny/v2",
        "github.com/markbates/pkger",
        "fmt",
        "context",
        "path/filepath",
        "github.com/gobuffalo/plush/v4",
        "github.com/ronaksoft/rony/config",
        "github.com/markbates/pkger/pkging/mem",
        "os",
        "github.com/spf13/cobra"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/rony"
      ],
      "imports": []
    },
    {
      "name": "rest",
      "path": "github.com/ronaksoft/rony/rest",
      "imported": [
        "github.com/ronaksoft/rony/internal/gateway",
        "github.com/ronaksoft/rony/tools",
        "mime/multipart",
        "github.com/ronaksoft/rony"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": [
        "NewFactory(onRequest RequestHandler, onResponse ResponseHandler)"
      ]
    },
    {
      "name": "gossipCluster",
      "path": "github.com/ronaksoft/rony/internal/cluster/gossip",
      "imported": [
        "github.com/ronaksoft/rony/internal/log",
        "github.com/hashicorp/memberlist",
        "sync",
        "github.com/ronaksoft/rony/internal/msg",
        "github.com/ronaksoft/rony/tools",
        "hash/crc64",
        "github.com/ronaksoft/rony/internal/cluster",
        "google.golang.org/protobuf/proto",
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/errors",
        "net",
        "fmt",
        "go.uber.org/zap",
        "time",
        "io/ioutil"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": [
        "New(dataPath string, cfg Config)"
      ]
    },
    {
      "name": "main",
      "path": "github.com/ronaksoft/rony/cmd/cli-playground",
      "imported": [
        "github.com/ronaksoft/rony/edgec",
        "time",
        "github.com/c-bata/go-prompt",
        "github.com/ronaksoft/rony/store",
        "github.com/ronaksoft/rony/errors",
        "github.com/ronaksoft/rony/tools",
        "sync/atomic",
        "runtime",
        "sync",
        "github.com/ronaksoft/rony/edge",
        "github.com/spf13/cobra",
        "github.com/ronaksoft/rony/internal/log",
        "runtime/pprof",
        "os",
        "fmt",
        "strings",
        "github.com/ronaksoft/rony/registry",
        "github.com/ronaksoft/rony/pools",
        "github.com/ronaksoft/rony",
        "runtime/trace",
        "sort",
        "github.com/ryanuber/columnize",
        "github.com/ronaksoft/rony/internal/testEnv/pb/service"
      ],
      "importedBy": [],
      "imports": []
    },
    {
      "name": "z",
      "path": "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/z",
      "imported": [
        "google.golang.org/protobuf/reflect/protoreflect",
        "google.golang.org/protobuf/types/descriptorpb",
        "fmt",
        "google.golang.org/protobuf/compiler/protogen"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/aggregate",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/helper"
      ],
      "imports": [
        "CqlKind(d protoreflect.FieldDescriptor)",
        "Constructor(file *protogen.File, g *protogen.GeneratedFile, desc protoreflect.MessageDescriptor)",
        "Name(file *protogen.File, g *protogen.GeneratedFile, desc protoreflect.MessageDescriptor)",
        "PackageName(file *protogen.File, g *protogen.GeneratedFile, desc protoreflect.MessageDescriptor)",
        "DescName(file *protogen.File, g *protogen.GeneratedFile, desc protoreflect.MessageDescriptor)",
        "ZeroValue(f protoreflect.FieldDescriptor)",
        "GoKind(file *protogen.File, g *protogen.GeneratedFile, d protoreflect.FieldDescriptor)"
      ]
    },
    {
      "name": "cluster",
      "path": "github.com/ronaksoft/rony/internal/cluster",
      "imported": [
        "github.com/ronaksoft/rony",
        "net"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/cluster/gossip",
        "github.com/ronaksoft/rony/edge"
      ],
      "imports": []
    },
    {
      "name": "pools",
      "path": "github.com/ronaksoft/rony/pools",
      "imported": [
        "time",
        "github.com/panjf2000/ants/v2",
        "google.golang.org/protobuf/proto",
        "io",
        "strings",
        "sync"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/edgec",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/gateway",
        "github.com/ronaksoft/rony/internal/testEnv",
        "github.com/ronaksoft/rony/tools",
        "github.com/ronaksoft/rony/internal/tunnel/udp",
        "github.com/ronaksoft/rony/internal/gateway/tcp/util",
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/gateway/tcp"
      ],
      "imports": [
        "NewByteBuffer(min, max int)",
        "NewByteSlice(min, max int)",
        "Go(f func ())",
        "AcquireStringsBuilder()",
        "ReleaseStringsBuilder(sb *strings.Builder)",
        "AcquireTimer(timeout time.Duration)",
        "ReleaseTimer(t *time.Timer)",
        "ResetTimer(t *time.Timer, period time.Duration)",
        "AcquireWaitGroup()",
        "ReleaseWaitGroup(wg *sync.WaitGroup)"
      ]
    },
    {
      "name": "rpc",
      "path": "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc",
      "imported": [
        "strings",
        "fmt",
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony/z",
        "github.com/ronaksoft/rony/tools",
        "google.golang.org/protobuf/compiler/protogen",
        "google.golang.org/protobuf/proto",
        "google.golang.org/protobuf/types/descriptorpb"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/cmd/protoc-gen-gorony"
      ],
      "imports": [
        "New(f *protogen.File, g *protogen.GeneratedFile)"
      ]
    },
    {
      "name": "msg",
      "path": "github.com/ronaksoft/rony/internal/msg",
      "imported": [
        "reflect",
        "google.golang.org/protobuf/proto",
        "github.com/ronaksoft/rony/tools",
        "sync",
        "github.com/ronaksoft/rony/registry",
        "github.com/ronaksoft/rony/store",
        "google.golang.org/protobuf/runtime/protoimpl",
        "google.golang.org/protobuf/reflect/protoreflect",
        "github.com/ronaksoft/rony"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/cluster/gossip",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/internal/tunnel",
        "github.com/ronaksoft/rony/internal/tunnel/udp"
      ],
      "imports": [
        "UpdatePageWithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Page)",
        "DeletePageWithTxn(txn *store.LTxn, alloc *tools.Allocator, id uint32)",
        "IterPages(txn *store.LTxn, alloc *tools.Allocator, cb func (m *Page), orderBy ...PageOrder)",
        "ListPage(offsetID uint32, lo *store.ListOption, cond func (m *Page), orderBy ...PageOrder)",
        "CreatePageWithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Page)",
        "ListPageByReplicaSet(replicaSet uint64, offsetID uint32, lo *store.ListOption, cond func (m *Page))",
        "CreatePage(m *Page)",
        "ReadPage(id uint32, m *Page)",
        "SavePageWithTxn(txn *store.LTxn, alloc *tools.Allocator, m *Page)",
        "IterPageByReplicaSet(txn *store.LTxn, alloc *tools.Allocator, replicaSet uint64, cb func (m *Page))",
        "ReadPageByReplicaSetAndIDWithTxn(txn *store.LTxn, alloc *tools.Allocator, replicaSet uint64, id uint32, m *Page)",
        "UpdatePage(id uint32, m *Page)",
        "DeletePage(id uint32)",
        "SavePage(m *Page)",
        "ReadPageWithTxn(txn *store.LTxn, alloc *tools.Allocator, id uint32, m *Page)",
        "ReadPageByReplicaSetAndID(replicaSet uint64, id uint32, m *Page)"
      ]
    },
    {
      "name": "store",
      "path": "github.com/ronaksoft/rony/store",
      "imported": [
        "github.com/dgraph-io/badger/v3",
        "github.com/ronaksoft/rony/internal/metrics",
        "github.com/ronaksoft/rony/tools",
        "google.golang.org/protobuf/proto",
        "time",
        "fmt"
      ],
      "importedBy": [
        "github.com/ronaksoft/rony/internal/testEnv/pb/model",
        "github.com/ronaksoft/rony/internal/msg",
        "github.com/ronaksoft/rony/internal/store/localdb",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/cmd/cli-playground",
        "github.com/ronaksoft/rony/internal/testEnv/pb/singleton"
      ],
      "imports": [
        "NewEntry(key, value []byte)",
        "NewListOption()",
        "NewIterOption()",
        "Move(txn *LTxn, oldKey, newKey []byte)",
        "Set(txn *LTxn, alloc *tools.Allocator, val []byte, keyParts ...interface{})",
        "Get(txn *LTxn, alloc *tools.Allocator, keyParts ...interface{})",
        "Exists(txn *LTxn, alloc *tools.Allocator, keyParts ...interface{})",
        "Marshal(txn *LTxn, alloc *tools.Allocator, m proto.Message, keyParts ...interface{})",
        "Unmarshal(txn *LTxn, alloc *tools.Allocator, m proto.Message, keyParts ...interface{})",
        "UnmarshalMerge(txn *LTxn, alloc *tools.Allocator, m proto.Message, keyParts ...interface{})",
        "Delete(txn *LTxn, alloc *tools.Allocator, keyParts ...interface{})",
        "GetByKey(txn *LTxn, alloc *tools.Allocator, key []byte)",
        "Init(config Config)",
        "View(fn func (txn *LTxn))",
        "BatchWrite(e *Entry)",
        "DB()",
        "Update(fn func (txn *LTxn))"
      ]
    },
    {
      "name": "main",
      "path": "github.com/ronaksoft/rony/internal/templates/skel/cmd/cli-project",
      "imported": [
        "github.com/ronaksoft/rony",
        "github.com/ronaksoft/rony/config",
        "github.com/ronaksoft/rony/edgec",
        "runtime",
        "time",
        "github.com/spf13/cobra",
        "github.com/ronaksoft/rony/tools",
        "github.com/ronaksoft/rony/edge",
        "github.com/ronaksoft/rony/registry",
        "os",
        "fmt"
      ],
      "importedBy": [],
      "imports": []
    }
  ]
}