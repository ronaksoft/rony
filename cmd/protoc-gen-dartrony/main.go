package main

import (
	"fmt"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/aggregate"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/helper"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/singleton"
	"google.golang.org/protobuf/compiler/protogen"
)

/*
   Creation Time: 2021 - Apr - 15
   Created by:  (ehsan)
   Maintainers:
      1.  Ehsan N. Moosa (E2)
   Auditor: Ehsan N. Moosa (E2)
   Copyright Ronak Software Group 2020
*/

/*
	Pegeut 3008
	450K
	379K - 200 Pishpardakht
	Metalic
*/

func main() {
	// plugins := make(map[string]struct{})
	pgo := protogen.Options{}
	pgo.Run(func(plugin *protogen.Plugin) error {
		for _, f := range plugin.Files {
			// Create the generator func
			g := plugin.NewGeneratedFile(fmt.Sprintf("%s.rony.dart", f.GeneratedFilenamePrefix), f.GoImportPath)

			g.P("// Code generated by Rony's protoc plugin; DO NOT EDIT.")
			g.P()

			// Generate all the helper functions
			g1 := helper.New(f, g)
			g1.Generate()

			// Generate Aggregate or Singleton repo functionality based on the 'rony_repo' option
			g2 := aggregate.New(f, g)
			g2.Generate()

			g3 := singleton.New(f, g)
			g3.Generate()

			g4 := rpc.New(f, g)
			g4.Generate()

		}
		return nil
	})
}
