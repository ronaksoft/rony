package main

import (
	"github.com/ronaksoft/rony"
	c "<%= packagePath() %>/conf"
	"github.com/ronaksoft/rony/edge"
	"github.com/spf13/cobra"
	"os"
)

var edgeServer *edge.Server

var ServerCmd = &cobra.Command{
	Use: "server",
	RunE: func(cmd *cobra.Command, args []string) error {
		err := c.Conf().BindCmdFlags(cmd)
		if err != nil {
			return err
		}

		wd, _ := os.Getwd()
        err = c.Conf().ReadFile(c.GetConfig(), wd)
        if err != nil {
            cmd.Println("could not read from config file: ", err)
        }


		// Instantiate the edge server
		edgeServer = edge.NewServer(
			c.GetServerID(),
			edge.WithDataDir(c.GetDataPath()),
			edge.WithTcpGateway(edge.TcpGatewayConfig{
				ListenAddress: c.GetGatewayListen(),
				MaxIdleTime:   c.GetIdleTime(),
				Protocol:      rony.TCP,
				ExternalAddrs: c.GetGatewayAdvertiseHostPort(),
			}),
			edge.WithGossipCluster(edge.GossipClusterConfig{
				Bootstrap:  c.GetBootstrap(),
				ReplicaSet: c.GetReplicaSet(),
				GossipPort: c.GetGossipPort(),
			}),
			edge.WithUdpTunnel(edge.UdpTunnelConfig{
				ListenAddress: c.GetTunnelListen(),
				ExternalAddrs: c.GetTunnelAdvertiseHostPort(),
			}),
		)

    	// Register the implemented service into the edge server
		// rpc.RegisterSampleService(&rpc.SampleService{}, edgeServer)

		// Start the edge server components
		edgeServer.Start()

        // Join the cluster if is set in config
		if !c.GetBootstrap() && c.GetGossipSeedHostPort() != "" {
            _, err = edgeServer.Cluster().Join(c.GetGossipSeedHostPort())
            if err != nil {
                cmd.Println("could not join gossip cluster")
            }
        }


		// Wait until a shutdown signal received.
		return edgeServer.ShutdownWithSignal(os.Kill, os.Interrupt)
	},
}
