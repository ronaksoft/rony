package main

import (
	"fmt"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/helper"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/store"
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
)

func main() {
	plugins := make(map[string]struct{})
	pgo := protogen.Options{
		ParamFunc: func(name, value string) error {
			switch name {
			case "option":
				for _, p := range strings.Split(value, "|") {
					plugins[p] = struct{}{}
				}
			}
			return nil
		},
		ImportRewriteFunc: func(path protogen.GoImportPath) protogen.GoImportPath {
			// TODO:: this is a hack for bug in Golang/Protobuf which does not support go module versions
			switch path {
			case "github.com/scylladb/gocqlx":
				return "github.com/scylladb/gocqlx/v2"
			}
			return path
		},
	}
	pgo.Run(func(plugin *protogen.Plugin) error {
		for _, f := range plugin.Files {
			if !f.Generate || f.Proto.GetPackage() == "google.protobuf" {
				continue
			}

			// Create the generator func
			g := plugin.NewGeneratedFile(fmt.Sprintf("%s.rony.go", f.GeneratedFilenamePrefix), f.GoImportPath)
			g.P("// Code generated by Rony's protoc plugin; DO NOT EDIT.")
			g.P()

			// Generate all the helper functions
			g1 := helper.New(f, g, plugins)
			g1.Generate()

			// Generate Aggregate or Singleton repo functionality based on the 'rony_repo' option
			// g2 := aggregate.New(f, g)
			// g2.Generate()

			// Generate Local Store functionalities
			g3 := store.New(f, g)
			g3.Generate()

			g4 := rpc.New(f, g)
			g4.Generate()
		}
		return nil
	})
}
