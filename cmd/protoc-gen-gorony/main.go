package main

import (
	"fmt"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/helper"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/repo/local/store"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/repo/remote/cql"
	"github.com/ronaksoft/rony/cmd/protoc-gen-gorony/rpc"
	"github.com/ronaksoft/rony/internal/codegen"
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
)

func main() {
	plugins := make(map[string]struct{})
	pgo := protogen.Options{
		ParamFunc: func(name, value string) error {
			switch name {
			case "option":
				for _, p := range strings.Split(value, "|") {
					plugins[p] = struct{}{}
				}
			}
			return nil
		},
		ImportRewriteFunc: func(path protogen.GoImportPath) protogen.GoImportPath {
			// TODO:: this is a hack for bug in Golang/Protobuf which does not support go module versions
			switch path {
			case "github.com/scylladb/gocqlx":
				return "github.com/scylladb/gocqlx/v2"
			}

			return path
		},
	}

	pgo.Run(func(plugin *protogen.Plugin) error {
		protocVer := plugin.Request.GetCompilerVersion()
		for _, protoFile := range plugin.Files {
			if !protoFile.Generate || protoFile.Proto.GetPackage() == "google.protobuf" {
				continue
			}

			// Create the generator func
			generatedFile := plugin.NewGeneratedFile(fmt.Sprintf("%s.rony.go", protoFile.GeneratedFilenamePrefix), protoFile.GoImportPath)
			generatedFile.P("// Code generated by Rony's protoc plugin; DO NOT EDIT.")
			generatedFile.P("// ProtoC ver. v", protocVer.GetMajor(), ".", protocVer.GetMinor(), ".", protocVer.GetPatch())
			generatedFile.P("// Rony ver. ", codegen.Version)
			generatedFile.P("// Source: ", protoFile.Proto.GetName())
			generatedFile.P()

			// Generate all the helper functions
			g1 := helper.New(protoFile, generatedFile, plugins)
			g1.Generate()

			// Generate Local Store functionalities
			g3 := store.New(protoFile, generatedFile)
			g3.Generate()

			// Generate rpc helper functions (Server, Client and CLI)
			g4 := rpc.New(protoFile, generatedFile)
			g4.Generate()

			if _, ok := plugins["cql"]; ok {
				if cql.Check(protoFile) {
					// TODO:: if generating cql is enabled
					generatedFile2 := plugin.NewGeneratedFile(fmt.Sprintf("%s.cql", protoFile.GeneratedFilenamePrefix), protoFile.GoImportPath)
					g5 := cql.NewCQL(protoFile, generatedFile2)
					g5.Generate()

					g6 := cql.NewGO(protoFile, generatedFile)
					g6.Generate()
				}
			}

		}

		return nil
	})
}
