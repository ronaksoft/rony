syntax = "proto3";
package rony;
option go_package = "github.com/ronaksoft/rony";
import "github.com/ronaksoft/rony/options.proto";

// MessageEnvelope
// This type of message will be used to contain another ProtoBuffer Message inside
message MessageEnvelope {
  option (rony_skip_json) = true;
  uint64 Constructor = 1 [jstype = JS_STRING];
  fixed64 RequestID = 2;
  bool JsonEncoded = 3;
  bytes Message = 4;
  bytes Auth = 8;
  repeated KeyValue Header = 10;
}

message Ping {
  int64 ID = 1;
}

message Pong {
  int64 ID = 2;
}


// KeyValue
message KeyValue {
  string Key = 1;
  string Value = 2;
}

// MessageContainer
// This type of message will be used to send multi messages inside a single container message
message MessageContainer {
  int32 Length = 1;
  repeated MessageEnvelope Envelopes = 2;
  // SyncRun makes the execution in sequence if it is TRUE
  bool SyncRun = 3;
}

// Error
message Error {
  string Code = 1;
  string Items = 2;
  string Description = 3;
}

// RedirectReason
enum RedirectReason {
  ReplicaSetSession = 0;
  ReplicaSetRequest = 1;
  Reserved1 = 3;
  Reserved2 = 4;
  Reserved3 = 5;
  Reserved4 = 6;
}

// Redirect
message Redirect {
  RedirectReason Reason = 100;
  repeated Edge Edges = 2;
  uint32 WaitInSec = 3;
}

// Edge
message Edge {
  uint64 ReplicaSet = 1;
  string ServerID = 2;
  repeated string HostPorts = 3;
}

// Edges
message Edges {
  repeated Edge Nodes = 1;
}

// GetNodes
// @Function
// @Return: Edges
message GetNodes {
  repeated uint64 ReplicaSet = 1;
}

// GetNodes
// @Function
// @Return: Edges
message GetAllNodes {
}

// HttpBody used by REST proxies to fill the output.
message HttpBody {
  string ContentType = 1;
  repeated KeyValue Header = 2;
  bytes Body = 3;
}