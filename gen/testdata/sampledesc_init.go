package sampleDesc 

import ( 
	"fmt" 
	"github.com/gobwas/pool/pbytes" 
	"github.com/gocql/gocql" 
	"github.com/scylladb/gocqlx" 
	"github.com/scylladb/gocqlx/qb" 
	"strings" 
	"sync" 
) 


/* 
	   Creation Time: YYYY - MMM - DD 
	   Auto Generated by Rony's Code Generator 
*/ 
var ( 
	dbs	*gocql.Session 
	tbModel1 = "model_1" 
	qpGetModel1 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Select(tbModel1).
			Columns("data"). 
			Where( 
				qb.Eq("p_1"),
				qb.Eq("p_3"),
			).ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
	qpSaveModel1 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Insert(tbModel1).
			Columns("p_1","p_3","data").
			ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
	tbModel1ByP3 = "model_1_by_p_3" 
	qpGetModel1ByP3 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Select(tbModel1ByP3).
			Columns("data"). 
			Where( 
				qb.Eq("p_3"),
				qb.Eq("p_1"),
			).ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
	tbModel2 = "model_2" 
	qpGetModel2 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Select(tbModel2).
			Columns("data"). 
			Where( 
				qb.Eq("pq_1"),
			).ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
	qpSaveModel2 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Insert(tbModel2).
			Columns("pq_1","data").
			ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
) 


func Init(s *gocql.Session) { 
	dbs = s 
} 

func CreateTables(s *gocql.Session, db string) error { 
	var ( 
		q     *gocql.Query 
		err   error 
		stmtB strings.Builder 
	) 

	createKeySpaceQuery := fmt.Sprintf("CREATE KEYSPACE IF NOT EXISTS %s WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}", db) 
	err = s.Query(createKeySpaceQuery).Exec() 
	if err != nil { 
		return err  
	} 
	stmtB.Reset() 
	stmtB.WriteString("CREATE TABLE IF NOT EXISTS ") 
	stmtB.WriteString(fmt.Sprintf("%s.model_1 (\n", db))
	stmtB.WriteString("p_1 text,\n")
	stmtB.WriteString("p_3 text,\n")
	stmtB.WriteString("data blob,\n") 
	stmtB.WriteString("PRIMARY KEY ((p_1), p_3)")
	stmtB.WriteString(");") 
	q = s.Query(stmtB.String()).RetryPolicy(nil) 
	err = q.Exec() 
	q.Release() 
	if err != nil { 
		return err 
	} 

	stmtB.Reset() 
	stmtB.WriteString("CREATE MATERIALIZED VIEW IF NOT EXISTS ") 
	stmtB.WriteString(fmt.Sprintf("%s.model_1_by_p_3 AS\n", db))
	stmtB.WriteString("SELECT *\n") 
	stmtB.WriteString(fmt.Sprintf("FROM %s.model_1\n", db))
	stmtB.WriteString("WHERE p_1 IS NOT NULL\n") 
	stmtB.WriteString("AND p_3 IS NOT NULL\n") 
	stmtB.WriteString("PRIMARY KEY ((p_3), p_1)")
	q = s.Query(stmtB.String()).RetryPolicy(nil) 
	err = q.Exec() 
	if err != nil { 
		return err 
	} 

	stmtB.Reset() 
	stmtB.WriteString("CREATE TABLE IF NOT EXISTS ") 
	stmtB.WriteString(fmt.Sprintf("%s.model_2 (\n", db))
	stmtB.WriteString("pq_1 bigint,\n")
	stmtB.WriteString("data blob,\n") 
	stmtB.WriteString("PRIMARY KEY (pq_1)")
	stmtB.WriteString(");") 
	q = s.Query(stmtB.String()).RetryPolicy(nil) 
	err = q.Exec() 
	q.Release() 
	if err != nil { 
		return err 
	} 

	return nil 
} 

func SaveModel1(x *Model1) error {
	b := pbytes.GetLen(x.Size()) 
	defer pbytes.Put(b) 
	n, err := x.MarshalTo(b) 
	if err != nil { 
		return err 
	} 

	q := qpSaveModel1.Get().(*gocqlx.Queryx) 
	defer qpSaveModel1.Put(q) 

	q.Bind(x.P1, x.P3, b[:n]) 
	err = q.Exec() 
	return err 
} 

func SaveModel2(x *Model2) error {
	b := pbytes.GetLen(x.Size()) 
	defer pbytes.Put(b) 
	n, err := x.MarshalTo(b) 
	if err != nil { 
		return err 
	} 

	q := qpSaveModel2.Get().(*gocqlx.Queryx) 
	defer qpSaveModel2.Put(q) 

	q.Bind(x.PQ1, b[:n]) 
	err = q.Exec() 
	return err 
} 

func GetModel1(p1 string,p3 string) (*Model1, error) {
	var ( 
		b []byte 
	) 

	q := qpGetModel1.Get().(*gocqlx.Queryx) 
	defer qpGetModel1.Put(q) 

	q.Bind(p1, p3) 
	err := q.Scan(&b) 
	if err != nil { 
		return nil, err 
	} 

	v := &Model1{}
	err = v.Unmarshal(b) 
	if err != nil { 
		return nil, err 
	} 

	return v, nil 
} 

func GetModel1ByP3(p3 string,p1 string) (*Model1, error) {
	var ( 
		b []byte 
	) 

	q := qpGetModel1ByP3.Get().(*gocqlx.Queryx) 
	defer qpGetModel1ByP3.Put(q) 

	q.Bind(p3, p1) 
	err := q.Scan(&b) 
	if err != nil { 
		return nil, err 
	} 

	v := &Model1{}
	err = v.Unmarshal(b) 
	if err != nil { 
		return nil, err 
	} 

	return v, nil 
} 

func GetModel2(pQ1 int64) (*Model2, error) {
	var ( 
		b []byte 
	) 

	q := qpGetModel2.Get().(*gocqlx.Queryx) 
	defer qpGetModel2.Put(q) 

	q.Bind(pQ1) 
	err := q.Scan(&b) 
	if err != nil { 
		return nil, err 
	} 

	v := &Model2{}
	err = v.Unmarshal(b) 
	if err != nil { 
		return nil, err 
	} 

	return v, nil 
} 

