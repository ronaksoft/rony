// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sampledesc.proto

package sampleDesc

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This is a comment for model1
// The second line of the comment
type Model1 struct {
	P1 string  `protobuf:"bytes,1,req,name=P1" json:"P1"`
	P2 []int32 `protobuf:"varint,2,rep,name=P2" json:"P2,omitempty" json:"p1" bson:"p_2"`
	P3 string  `protobuf:"bytes,3,req,name=P3" json:"P3"`
}

func (m *Model1) Reset()         { *m = Model1{} }
func (m *Model1) String() string { return proto.CompactTextString(m) }
func (*Model1) ProtoMessage()    {}
func (*Model1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5ebea85eb720e2b, []int{0}
}
func (m *Model1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Model1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Model1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Model1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model1.Merge(m, src)
}
func (m *Model1) XXX_Size() int {
	return m.Size()
}
func (m *Model1) XXX_DiscardUnknown() {
	xxx_messageInfo_Model1.DiscardUnknown(m)
}

var xxx_messageInfo_Model1 proto.InternalMessageInfo

func (m *Model1) GetP1() string {
	if m != nil {
		return m.P1
	}
	return ""
}

func (m *Model1) GetP2() []int32 {
	if m != nil {
		return m.P2
	}
	return nil
}

func (m *Model1) GetP3() string {
	if m != nil {
		return m.P3
	}
	return ""
}

// This is a Model 2
type Model2 struct {
	PQ1 int64 `protobuf:"varint,1,req,name=PQ1" json:"PQ1"`
}

func (m *Model2) Reset()         { *m = Model2{} }
func (m *Model2) String() string { return proto.CompactTextString(m) }
func (*Model2) ProtoMessage()    {}
func (*Model2) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5ebea85eb720e2b, []int{1}
}
func (m *Model2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Model2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Model2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Model2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model2.Merge(m, src)
}
func (m *Model2) XXX_Size() int {
	return m.Size()
}
func (m *Model2) XXX_DiscardUnknown() {
	xxx_messageInfo_Model2.DiscardUnknown(m)
}

var xxx_messageInfo_Model2 proto.InternalMessageInfo

func (m *Model2) GetPQ1() int64 {
	if m != nil {
		return m.PQ1
	}
	return 0
}

func init() {
	proto.RegisterType((*Model1)(nil), "sampleDesc.Model1")
	proto.RegisterType((*Model2)(nil), "sampleDesc.Model2")
}

func init() { proto.RegisterFile("sampledesc.proto", fileDescriptor_a5ebea85eb720e2b) }

var fileDescriptor_a5ebea85eb720e2b = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0x4d, 0x49, 0x2d, 0x4e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0x88,
	0xb8, 0xa4, 0x16, 0x27, 0x4b, 0x49, 0x65, 0xe6, 0x95, 0xa4, 0x16, 0xe5, 0x25, 0xe6, 0xe8, 0x83,
	0xe5, 0x8a, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0x21, 0xea, 0x94, 0xe2, 0xb8, 0xd8, 0x7c, 0xf3, 0x53,
	0x52, 0x73, 0x0c, 0x85, 0x44, 0xb8, 0x98, 0x02, 0x0c, 0x25, 0x18, 0x15, 0x98, 0x34, 0x38, 0x9d,
	0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0x62, 0x0a, 0x30, 0x14, 0xd2, 0xe0, 0x62, 0x0a, 0x30, 0x92,
	0x60, 0x52, 0x60, 0xd6, 0x60, 0x75, 0x92, 0xf8, 0x74, 0x4f, 0x5e, 0x24, 0xab, 0x38, 0x3f, 0xcf,
	0x4a, 0xa9, 0xc0, 0x50, 0x49, 0x21, 0x09, 0xc2, 0x8a, 0x37, 0x52, 0x0a, 0x62, 0x0a, 0x30, 0x02,
	0xeb, 0x37, 0x96, 0x60, 0x46, 0xd1, 0x6f, 0xac, 0xa4, 0x00, 0x35, 0xdf, 0x48, 0x48, 0x8c, 0x8b,
	0x39, 0x20, 0x10, 0x62, 0x01, 0x33, 0x54, 0x01, 0x48, 0xc0, 0x49, 0xe2, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39,
	0x86, 0x1b, 0x8f, 0xe5, 0x18, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xd4, 0x00, 0x79, 0xd6,
	0x00, 0x00, 0x00,
}

func (m *Model1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Model1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.P3)
	copy(dAtA[i:], m.P3)
	i = encodeVarintSampledesc(dAtA, i, uint64(len(m.P3)))
	i--
	dAtA[i] = 0x1a
	if len(m.P2) > 0 {
		for iNdEx := len(m.P2) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSampledesc(dAtA, i, uint64(m.P2[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i -= len(m.P1)
	copy(dAtA[i:], m.P1)
	i = encodeVarintSampledesc(dAtA, i, uint64(len(m.P1)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Model2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Model2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintSampledesc(dAtA, i, uint64(m.PQ1))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintSampledesc(dAtA []byte, offset int, v uint64) int {
	offset -= sovSampledesc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Model1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.P1)
	n += 1 + l + sovSampledesc(uint64(l))
	if len(m.P2) > 0 {
		for _, e := range m.P2 {
			n += 1 + sovSampledesc(uint64(e))
		}
	}
	l = len(m.P3)
	n += 1 + l + sovSampledesc(uint64(l))
	return n
}

func (m *Model2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSampledesc(uint64(m.PQ1))
	return n
}

func sovSampledesc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSampledesc(x uint64) (n int) {
	return sovSampledesc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Model1) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSampledesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSampledesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSampledesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSampledesc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSampledesc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.P2 = append(m.P2, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSampledesc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSampledesc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSampledesc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.P2) == 0 {
					m.P2 = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSampledesc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.P2 = append(m.P2, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field P2", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSampledesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSampledesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSampledesc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipSampledesc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSampledesc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSampledesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("P1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("P3")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model2) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSampledesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PQ1", wireType)
			}
			m.PQ1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSampledesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PQ1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSampledesc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSampledesc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSampledesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PQ1")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSampledesc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSampledesc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSampledesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSampledesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSampledesc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSampledesc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSampledesc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSampledesc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSampledesc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSampledesc = fmt.Errorf("proto: unexpected end of group")
)
