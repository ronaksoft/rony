package sampleDesc 

import ( 
	"fmt" 
	"github.com/gocql/gocql" 
	"github.com/scylladb/gocqlx" 
	"github.com/scylladb/gocqlx/qb" 
	"strings" 
	"sync" 
) 


/* 
	   Creation Time: YYYY - MMM - DD 
	   Auto Generated by Rony's Code Generator 
*/ 
var ( 
	dbs	*gocql.Session 
	tbModel1ByP3 = "model_1_by_p_3" 
	qpGetModel1ByP3 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Select(tbModel1ByP3).
			Where( 
				qb.Eq("p_3"),
				qb.Eq("p_1"),
				qb.Eq("p_2"),
			).ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
	tbModel1ById = "model_1_by_id" 
	qpGetModel1ById = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Select(tbModel1ById).
			Where( 
				qb.Eq("p_1"),
				qb.Eq("p_2"),
				qb.Eq("p_3"),
			).ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
	tbModel2ByPQ1 = "model_2_by_pq_1" 
	qpGetModel2ByPQ1 = sync.Pool { 
		New: func() interface{} { 
			stmt, name := qb.Select(tbModel2ByPQ1).
			Where( 
				qb.Eq("pq_1"),
			).ToCql() 
			return gocqlx.Query(dbs.Query(stmt), name) 
		}, 
	} 
) 


func Init(s *gocql.Session) { 
	dbs = s 
} 


func CreateTables(s *gocql.Session, db string) error { 
	var ( 
		q     *gocql.Query 
		err   error 
		stmtB strings.Builder 
	) 

	createKeySpaceQuery := fmt.Sprintf("CREATE KEYSPACE IF NOT EXISTS %s WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}", db) 
	err = s.Query(createKeySpaceQuery).Exec() 
	if err != nil { 
		return err  
	} 
	stmtB.Reset() 
	stmtB.WriteString("CREATE TABLE IF NOT EXISTS ") 
	stmtB.WriteString(fmt.Sprintf("%s.model_1_by_id (\n", db))
	stmtB.WriteString("p_1 text,\n")
	stmtB.WriteString("p_2 frozen<list<int>>,\n")
	stmtB.WriteString("p_3 text,\n")
	stmtB.WriteString("data blob,\n") 
	stmtB.WriteString("PRIMARY KEY ((p_1), p_2,p_3)")
	stmtB.WriteString(");") 
	q = s.Query(stmtB.String()).RetryPolicy(nil) 
	err = q.Exec() 
	q.Release() 
	if err != nil { 
		return err 
	} 

	stmtB.Reset() 
	stmtB.WriteString("CREATE MATERIALIZED VIEW IF NOT EXISTS ") 
	stmtB.WriteString(fmt.Sprintf("%s.model_1_by_p_3 AS\n", db))
	stmtB.WriteString("SELECT *\n") 
	stmtB.WriteString(fmt.Sprintf("FROM %s.model_1_by_id\n", db))
	stmtB.WriteString("WHERE p_1 IS NOT NULL\n") 
	stmtB.WriteString("AND p_2 IS NOT NULL\n") 
	stmtB.WriteString("AND p_3 IS NOT NULL\n") 
	stmtB.WriteString("PRIMARY KEY ((p_3), p_1,p_2)")
	q = s.Query(stmtB.String()).RetryPolicy(nil) 
	err = q.Exec() 
	if err != nil { 
		return err 
	} 

	stmtB.Reset() 
	stmtB.WriteString("CREATE TABLE IF NOT EXISTS ") 
	stmtB.WriteString(fmt.Sprintf("%s.model_2_by_pq_1 (\n", db))
	stmtB.WriteString("pq_1 bigint,\n")
	stmtB.WriteString("data blob,\n") 
	stmtB.WriteString("PRIMARY KEY (pq_1)")
	stmtB.WriteString(");") 
	q = s.Query(stmtB.String()).RetryPolicy(nil) 
	err = q.Exec() 
	q.Release() 
	if err != nil { 
		return err 
	} 

	return nil 
} 
